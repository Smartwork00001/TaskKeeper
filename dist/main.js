(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>i});var s=n(537),a=n.n(s),r=n(645),o=n.n(r)()(a());o.push([e.id,'* {\n  margin: 0;\n  padding: 0;\n}\n\nbody{\n  position: relative;\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n}\n\n.project-display, .tasks-display{\n  display: flex;\n  flex-direction: column;\n  gap:1rem;\n  padding: 1rem;\n  background-color: antiquewhite;\n  margin: 1rem;\n  border-radius: 1rem;\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n  flex:1;\n}\n\n.project, .task{\n  cursor: pointer;\n  padding: 1rem;\n  border-bottom: 2px solid #453986;\n  min-width: 10%;\n  display: grid;\n}\n\n.project{\n  grid-template-columns: 0.25fr 2fr 4fr 0.5fr;\n}\n\n.task{\n  grid-template-columns: 1fr 1fr 1fr 1fr 3fr 1fr;\n}\n\n.nav-bar, .task-nav-bar{\n  padding:1rem;\n  background-color: #1e293b ;\n  display: flex;\n  justify-content: center;\n  gap: 1rem;\n}\n\n.okButtonDiv , .askUserDiv{\n  position: fixed;\n  top: 20%;\n  left: calc((100vw - 400px)/2);\n  background-color: aliceblue;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  /* justify-content: center; */\n  padding: 1rem;\n  gap: 2rem;\n  border-radius: 1rem;\n  max-width: 400px;\n  min-width: 400px;\n}\n\n.askUserTextArea{\n  resize: vertical;\n  background: #f3f3f3;\n  overflow: auto;\n  box-sizing: border-box;\n}\n\n.okButtonDiv > .purple-button {\n  width: 400px;\n}\n\n.add-project-form,\n.add-task-form {\n  position: fixed;\n  top: 20%;\n  left: calc((100vw - 437px)/2);\n  background-color: #cffafe;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 1rem;\n  gap: 2rem;\n  border-radius: 1rem;\n}\n\n#addProjectForm, #addTaskForm{\n  display: flex;\n  flex-direction: column;\n  box-shadow: #cffafe 0px 7px 29px 0px;\n}\n\n#addProjectForm > div,\n #addProjectForm > button,\n #addTaskForm > div, \n #addTaskForm > button{\n  margin-bottom: 1rem;\n}\n\n.single-project-details{\n  display: grid;\n  grid-template-columns: 1fr 2fr 3fr;\n  gap: 1rem;\n  background-color: #eff6ff;\n}\n\n.single-project-details-wrapper{\n  display: grid;\n  grid-template-rows: 1fr 1fr;\n  padding : 0;\n  margin: 1rem;\n}\n\n.single-project-details-wrapper > .purple-button,\n.single-task-details-wrapper > .purple-button{\n  padding: 0.25rem;\n  max-width: fit-content;\n  max-height: 2rem;\n}\n\n.single-project-tasks{\n  background-color: #fff;\n}\n\n.single-task-display{\n  background-color: #ffe4e6;\n  border-radius: 1rem;\n  margin: 2rem;\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n}\n\n.single-task-details-wrapper{\n  display: grid;\n  grid-template-columns: 1fr 4fr 1fr;\n  margin:1rem;\n  border-bottom: 2px solid #453986;\n}\n\n.single-task-details-wrapper > div, .single-task-details-wrapper > button{\n  padding: 1rem;\n  align-self: center;\n}\n\n.left{\n  align-self: flex-start;\n}\n\n.center{\n  align-self: center;\n}\n\n.right{\n  align-self: flex-end;\n}\n\n.purple-button{\n  appearance: none;\n  background: #4338ca;\n  border: 0;\n  border-radius: 0.5rem;\n  color: #fff;\n  cursor: pointer;\n  font: inherit;\n  font-weight: 500;\n  line-height: 1;\n  padding: 0.7em 1em;\n}\n\ninput[type="text"] {\n  width: 100%;\n  border: 0;\n  border-bottom: 2px solid gray;\n  outline: 0;\n  font-size: 1.3rem;\n  color: black;\n  padding: 4px 0;\n  background: transparent;\n  transition: border-color 0.2s;\n}\n\n.hidden {\n  display: none;\n}\n\n.big-text{\n  font-weight: bold;\n  font-size: 5rem;\n}\n\n.medium-text{\n  font-weight: bold;\n  font-size: 2.5rem;\n}\n\n.small-text{\n  font-weight: bold;\n  font-size: 1.2rem;\n}\n\n.white-text{\n  color: #f8fafc;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;EACR,aAAa;EACb,8BAA8B;EAC9B,YAAY;EACZ,mBAAmB;EACnB,qDAAqD;EACrD,MAAM;AACR;;AAEA;EACE,eAAe;EACf,aAAa;EACb,gCAAgC;EAChC,cAAc;EACd,aAAa;AACf;;AAEA;EACE,2CAA2C;AAC7C;;AAEA;EACE,8CAA8C;AAChD;;AAEA;EACE,YAAY;EACZ,0BAA0B;EAC1B,aAAa;EACb,uBAAuB;EACvB,SAAS;AACX;;AAEA;EACE,eAAe;EACf,QAAQ;EACR,6BAA6B;EAC7B,2BAA2B;EAC3B,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,6BAA6B;EAC7B,aAAa;EACb,SAAS;EACT,mBAAmB;EACnB,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,cAAc;EACd,sBAAsB;AACxB;;AAEA;EACE,YAAY;AACd;;AAEA;;EAEE,eAAe;EACf,QAAQ;EACR,6BAA6B;EAC7B,yBAAyB;EACzB,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,aAAa;EACb,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,oCAAoC;AACtC;;AAEA;;;;EAIE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,kCAAkC;EAClC,SAAS;EACT,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,2BAA2B;EAC3B,WAAW;EACX,YAAY;AACd;;AAEA;;EAEE,gBAAgB;EAChB,sBAAsB;EACtB,gBAAgB;AAClB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;EACzB,mBAAmB;EACnB,YAAY;EACZ,qDAAqD;AACvD;;AAEA;EACE,aAAa;EACb,kCAAkC;EAClC,WAAW;EACX,gCAAgC;AAClC;;AAEA;EACE,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,SAAS;EACT,qBAAqB;EACrB,WAAW;EACX,eAAe;EACf,aAAa;EACb,gBAAgB;EAChB,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,SAAS;EACT,6BAA6B;EAC7B,UAAU;EACV,iBAAiB;EACjB,YAAY;EACZ,cAAc;EACd,uBAAuB;EACvB,6BAA6B;AAC/B;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,cAAc;AAChB",sourcesContent:['* {\n  margin: 0;\n  padding: 0;\n}\n\nbody{\n  position: relative;\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n}\n\n.project-display, .tasks-display{\n  display: flex;\n  flex-direction: column;\n  gap:1rem;\n  padding: 1rem;\n  background-color: antiquewhite;\n  margin: 1rem;\n  border-radius: 1rem;\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n  flex:1;\n}\n\n.project, .task{\n  cursor: pointer;\n  padding: 1rem;\n  border-bottom: 2px solid #453986;\n  min-width: 10%;\n  display: grid;\n}\n\n.project{\n  grid-template-columns: 0.25fr 2fr 4fr 0.5fr;\n}\n\n.task{\n  grid-template-columns: 1fr 1fr 1fr 1fr 3fr 1fr;\n}\n\n.nav-bar, .task-nav-bar{\n  padding:1rem;\n  background-color: #1e293b ;\n  display: flex;\n  justify-content: center;\n  gap: 1rem;\n}\n\n.okButtonDiv , .askUserDiv{\n  position: fixed;\n  top: 20%;\n  left: calc((100vw - 400px)/2);\n  background-color: aliceblue;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  /* justify-content: center; */\n  padding: 1rem;\n  gap: 2rem;\n  border-radius: 1rem;\n  max-width: 400px;\n  min-width: 400px;\n}\n\n.askUserTextArea{\n  resize: vertical;\n  background: #f3f3f3;\n  overflow: auto;\n  box-sizing: border-box;\n}\n\n.okButtonDiv > .purple-button {\n  width: 400px;\n}\n\n.add-project-form,\n.add-task-form {\n  position: fixed;\n  top: 20%;\n  left: calc((100vw - 437px)/2);\n  background-color: #cffafe;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 1rem;\n  gap: 2rem;\n  border-radius: 1rem;\n}\n\n#addProjectForm, #addTaskForm{\n  display: flex;\n  flex-direction: column;\n  box-shadow: #cffafe 0px 7px 29px 0px;\n}\n\n#addProjectForm > div,\n #addProjectForm > button,\n #addTaskForm > div, \n #addTaskForm > button{\n  margin-bottom: 1rem;\n}\n\n.single-project-details{\n  display: grid;\n  grid-template-columns: 1fr 2fr 3fr;\n  gap: 1rem;\n  background-color: #eff6ff;\n}\n\n.single-project-details-wrapper{\n  display: grid;\n  grid-template-rows: 1fr 1fr;\n  padding : 0;\n  margin: 1rem;\n}\n\n.single-project-details-wrapper > .purple-button,\n.single-task-details-wrapper > .purple-button{\n  padding: 0.25rem;\n  max-width: fit-content;\n  max-height: 2rem;\n}\n\n.single-project-tasks{\n  background-color: #fff;\n}\n\n.single-task-display{\n  background-color: #ffe4e6;\n  border-radius: 1rem;\n  margin: 2rem;\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n}\n\n.single-task-details-wrapper{\n  display: grid;\n  grid-template-columns: 1fr 4fr 1fr;\n  margin:1rem;\n  border-bottom: 2px solid #453986;\n}\n\n.single-task-details-wrapper > div, .single-task-details-wrapper > button{\n  padding: 1rem;\n  align-self: center;\n}\n\n.left{\n  align-self: flex-start;\n}\n\n.center{\n  align-self: center;\n}\n\n.right{\n  align-self: flex-end;\n}\n\n.purple-button{\n  appearance: none;\n  background: #4338ca;\n  border: 0;\n  border-radius: 0.5rem;\n  color: #fff;\n  cursor: pointer;\n  font: inherit;\n  font-weight: 500;\n  line-height: 1;\n  padding: 0.7em 1em;\n}\n\ninput[type="text"] {\n  width: 100%;\n  border: 0;\n  border-bottom: 2px solid gray;\n  outline: 0;\n  font-size: 1.3rem;\n  color: black;\n  padding: 4px 0;\n  background: transparent;\n  transition: border-color 0.2s;\n}\n\n.hidden {\n  display: none;\n}\n\n.big-text{\n  font-weight: bold;\n  font-size: 5rem;\n}\n\n.medium-text{\n  font-weight: bold;\n  font-size: 2.5rem;\n}\n\n.small-text{\n  font-weight: bold;\n  font-size: 1.2rem;\n}\n\n.white-text{\n  color: #f8fafc;\n}\n'],sourceRoot:""}]);const i=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",s=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),s&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),s&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,s,a,r){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(s)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(o[c]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);s&&o[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),r="/*# ".concat(a," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,s=0;s<t.length;s++)if(t[s].identifier===e){n=s;break}return n}function s(e,s){for(var r={},o=[],i=0;i<e.length;i++){var c=e[i],d=s.base?c[0]+s.base:c[0],l=r[d]||0,A="".concat(d," ").concat(l);r[d]=l+1;var u=n(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var m=a(p,s);s.byIndex=i,t.splice(i,0,{identifier:A,updater:m,references:1})}o.push(A)}return o}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var r=s(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<r.length;o++){var i=n(r[o]);t[i].references--}for(var c=s(e,a),d=0;d<r.length;d++){var l=n(r[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}r=c}}},569:e=>{var t={};e.exports=function(e,n){var s=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var s="";n.supports&&(s+="@supports (".concat(n.supports,") {")),n.media&&(s+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(s+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),s+=n.css,a&&(s+="}"),n.media&&(s+="}"),n.supports&&(s+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(s,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(s){var a=t[s];if(void 0!==a)return a.exports;var r=t[s]={id:s,exports:{}};return e[s](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),s=n(795),a=n.n(s),r=n(569),o=n.n(r),i=n(565),c=n.n(i),d=n(216),l=n.n(d),A=n(589),u=n.n(A),p=n(426),m={};m.styleTagTransform=u(),m.setAttributes=c(),m.insert=o().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=l(),t()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;const g=document.querySelector(".okButton"),f=document.querySelector(".okButtonDiv"),k=document.querySelector(".okButtonText");g.addEventListener("click",(function(){f.classList.add("hidden")}));const y=function(e){k.textContent=e,f.classList.remove("hidden")},h=class{static getProjects(){const e=localStorage.getItem("projects");return null===e?[]:JSON.parse(e)}static updateProject(e){localStorage.removeItem("projects"),localStorage.setItem("projects",JSON.stringify(e))}},v=()=>{const e=document.querySelector(".single-project-display"),t=document.querySelector(".single-project-tasks"),n=document.querySelector(".single-task-display");e.classList.contains("hidden")||e.classList.add("hidden"),t.classList.contains("hidden")||t.classList.add("hidden"),n.classList.contains("hidden")||n.classList.add("hidden");const s=document.querySelector(".project-display");s.classList.contains("hidden")&&s.classList.remove("hidden"),s.innerHTML="";const a=document.createElement("div");a.classList.add("project"),a.innerHTML='\n  <div class="project-no small-text">No.</div>\n  <div class="project-name small-text">Name</div>\n    <div class="project-desc small-text">Description</div>\n    <div class="project-date small-text">Date Created</div>',s.appendChild(a);const r=h.getProjects();let o=0;r.forEach((e=>{o+=1;const t=document.createElement("div");t.classList.add("project"),t.innerHTML=`<div class="project-no small-text">${o}</div>\n    <div class="project-name small-text">${e.name}</div>\n    <div class="project-desc small-text">${e.desc}</div>\n    <div class="project-date small-text">${e.date}</div>`,s.appendChild(t)}))};function E(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function C(e){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},C(e)}function x(e){return x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},x(e)}const b=class{static getTask(e){return JSON.parse(localStorage.getItem(e))}static updateTask(e,t){localStorage.removeItem(e),localStorage.setItem(e,JSON.stringify(t))}static addProject(e){localStorage.setItem(e,JSON.stringify([]))}static removeProject(e){localStorage.removeItem(e)}static getSingleTask(e,t){return this.getTask(e).find((e=>e.name===t))}},j=class{static validateDate(e){const t=e.split("-");return!!(3===t.length&&t[0]>=1&&t[0]<=9999&&t[1]>=1&&t[1]<=12&&t[2]>=1&&t[2]<=31&&function(e){if(E(1,arguments),!function(e){return E(1,arguments),e instanceof Date||"object"===C(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=function(e){E(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===x(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}(e);return!isNaN(Number(t))}(new Date(t[0],t[1],t[2])))}static validateName(e){return!!(e.length>=1&&e.length<=50&&e.match(/^[a-zA-Z0-9 .]+$/))}static validateDesc(e){return e.length>=1&&e.length<=140}static validateProject(e){return-1!==h.getProjects().findIndex((t=>t.name===e))}static validateNotes(e){return e.length>=1&&e.length<=140}static validateTask(e,t){return-1!==b.getTask(e).findIndex((e=>e.name===t))}},B=(e,t)=>{if(j.validateName(e)&&j.validateDesc(t)){const n=h.getProjects();if(-1!==n.findIndex((t=>t.name===e)))return void y("This project already exists!");n.push(new class{constructor(e,t){this.name=e,this.desc=t;const n=new Date;this.date=`${n.getDate()}-${n.getMonth()+1}-${n.getFullYear()}`}}(e,t)),b.addProject(e),h.updateProject(n),y(`Project ${e} created`),v()}else y("Please enter valid data\n    \nName must be only letters and numbers between 1 and 50 characters\n    \nDescription must be between 1 and 180 characters")},S=document.querySelector(".create-project-button"),T=document.querySelector(".add-project-form"),w=document.querySelector(".add-project");S.addEventListener("click",(function(e){e.preventDefault();const t=document.forms.addProjectForm,n=new FormData(t);B(n.get("projectName"),n.get("projectDesc")),T.classList.add("hidden"),t.reset()})),w.addEventListener("click",(()=>{T.classList.remove("hidden")}));const N=e=>{const t=(e=>{const t=h.getProjects(),n=t.findIndex((t=>t.name===e));return-1!==n?t[n]:(y("This project does not exist!"),-1)})(e),n=document.querySelector(".single-project-display"),s=document.querySelector(".single-task-display"),a=document.querySelector(".project-display");n.classList.contains("hidden")&&n.classList.remove("hidden"),s.classList.contains("hidden")||s.classList.add("hidden"),a.classList.contains("hidden")||a.classList.add("hidden"),n.querySelector(".single-project-name").textContent=t.name,n.querySelector(".single-project-desc").textContent=t.desc,n.querySelector(".single-project-date").textContent=t.date},q=class{constructor(){this.askUserTask=void 0,this.askUserDesc=!1,this.askUserName=!1,this.projectName=void 0,this.projectDesc=void 0,this.taskName=void 0}static getAskUserTask(){return this.askUserTask}static setAskUserTask(e){this.askUserTask=e}static getAskUserName(){return this.askUserName}static setAskUserName(e){this.askUserName=!!e}static getAskUserDesc(){return this.askUserDesc}static setAskUserDesc(e){this.askUserDesc=!!e}static getProjectName(){return this.projectName}static setProjectName(e){this.projectName=e}static getProjectDesc(){return this.projectDesc}static setProjectDesc(e){this.projectDesc=e}static getTaskName(){return this.taskName}static setTaskName(e){this.taskName=e}},P=(e,t)=>{const n=document.querySelector(".tasks-display"),s=document.querySelector(".single-task-display");n.classList.contains("hidden")||n.classList.add("hidden"),s.classList.contains("hidden")&&s.classList.remove("hidden");const a=document.querySelector(".single-task-project"),r=document.querySelector(".single-task-name"),o=document.querySelector(".single-task-desc"),i=document.querySelector(".single-task-date"),c=document.querySelector(".single-task-due"),d=document.querySelector(".single-task-priority"),l=document.querySelector(".single-task-notes"),A=document.querySelector(".single-task-status"),u=b.getSingleTask(e,t);a.textContent=u.project,r.textContent=u.name,o.textContent=u.desc,c.textContent=u.due,i.textContent=u.date,d.textContent=u.priority,l.textContent=u.notes,A.textContent=u.status},D=document.querySelector(".askUserButton"),L=document.querySelector(".askUserDiv"),U=document.querySelector(".askUserText"),I=document.querySelector(".askUserTextArea");D.addEventListener("click",(function(){L.classList.add("hidden"),"changeProjectDesc"===q.getAskUserTask()?((e,t)=>{const n=h.getProjects(),s=n.findIndex((t=>t.name===e));-1!==s&&j.validateDesc(t)?(n[s].desc=t,h.updateProject(n),y(` Project ${e} desc is changed!`),N(e)):y(`Project ${e} does not exist\n or desc <0 or >140 characters`)})(q.getProjectName(),I.value):"changeProjectName"===q.getAskUserTask()?((e,t)=>{const n=h.getProjects(),s=n.findIndex((t=>t.name===e));-1!==s?(n[s].name=t,h.updateProject(n),y(`Project ${e} is changed to ${t}!`),N(t)):y(`Project ${e} does not exist`)})(q.getProjectName(),I.value):"changeTaskName"===q.getAskUserTask()?((e,t,n)=>{const s=b.getTask(e);s.find((e=>e.name===t)).name=n,b.updateTask(e,s),P(e,n)})(q.getProjectName(),q.getTaskName(),I.value):"changeTaskDesc"===q.getAskUserTask()?((e,t,n)=>{if(j.validateDesc(n)){const s=b.getTask(e);s.find((e=>e.name===t)).desc=n,b.updateTask(e,s),P(e,t)}else y("Invalid!")})(q.getProjectName(),q.getTaskName(),I.value):"changeTaskDue"===q.getAskUserTask()?((e,t,n)=>{if(j.validateDate(n)){const s=b.getTask(e);s.find((e=>e.name===t)).due=n,b.updateTask(e,s),P(e,t)}else y("Invalid!")})(q.getProjectName(),q.getTaskName(),I.value):"changeTaskNotes"===q.getAskUserTask()?((e,t,n)=>{if(j.validateNotes(n)){const s=b.getTask(e);s.find((e=>e.name===t)).notes=n,b.updateTask(e,s),P(e,t)}else y("Invalid!")})(q.getProjectName(),q.getTaskName(),I.value):"changeTaskPriority"===q.getAskUserTask()?((e,t,n)=>{if(j.validateNotes(n)){const s=b.getTask(e);s.find((e=>e.name===t)).priority=n,b.updateTask(e,s),P(e,t)}else y("Invalid!")})(q.getProjectName(),q.getTaskName(),I.value):"changeTaskStatus"===q.getAskUserTask()&&((e,t,n)=>{if(j.validateNotes(n)){const s=b.getTask(e);s.find((e=>e.name===t)).status=n,b.updateTask(e,s),P(e,t)}else y("Invalid!")})(q.getProjectName(),q.getTaskName(),I.value),q.setAskUserTask(void 0),q.setProjectName(void 0),q.setTaskName(void 0)}));const $=function(e){U.textContent=e,I.value="",L.classList.remove("hidden")},F=()=>{const e=document.querySelector(".single-task-display"),t=document.querySelector(".single-project-tasks"),n=document.querySelector(".tasks-display"),s=document.querySelector(".single-project-name").textContent;if(s){e.classList.contains("hidden")||e.classList.add("hidden"),t.classList.contains("hidden")&&t.classList.remove("hidden"),n.classList.contains("hidden")&&n.classList.remove("hidden"),n.innerHTML="";const a=b.getTask(s),r=document.createElement("div");r.classList.add("task"),r.innerHTML='\n      <div class="display-task-no small-text hidden">Task No</div>\n      <div class="display-task-project small-text hidden">Project</div>\n      <div class="display-task-name small-text">Name</div>\n      <div class="display-task-date small-text">Created on</div>\n      <div class="display-task-due small-text">Due date</div>\n      <div class="display-task-priority small-text">Priority</div>\n      <div class="display-task-notes small-text">Notes</div>\n      <div class="display-task-status small-text">Status</div>',n.appendChild(r);let o=0;a.forEach((e=>{o+=1;const t=document.createElement("div");t.classList.add("task"),t.innerHTML=`\n      <div class="display-task-no small-text hidden">${o}</div>\n      <div class="display-task-project small-text hidden">${e.project}</div>\n      <div class="display-task-name small-text">${e.name}</div>\n      <div class="display-task-date small-text">${e.date}</div>\n      <div class="display-task-due small-text">${e.due}</div>\n      <div class="display-task-priority small-text">${e.priority}</div>\n      <div class="display-task-notes small-text">${e.notes}</div>\n      <div class="display-task-status small-text">${e.status}</div>`,n.appendChild(t)}))}},M=(e,t,n,s,a,r)=>{if(j.validateDate(s)&&j.validateName(t)&&j.validateDesc(n)&&j.validateProject(e)&&j.validateNotes(r)&&!j.validateTask(e,t)){const o=new class{constructor(e,t,n,s,a,r){this.project=e;const o=new Date;this.date=`${o.getFullYear()}-${o.getMonth()+1}-${o.getDate()}`,this.name=t,this.desc=n,this.due=s,this.priority=a,this.notes=r,this.status="not done"}}(e,t,n,s,a,r),i=b.getTask(e);i.push(o),b.updateTask(e,i),F(),y(`Task ${t} is created!`)}else y("Details not valid!")};localStorage.clear(),B("Default Project","This is the default project"),B("First Project","This is the first project"),B("Third Project","This is the third project"),B("Fourth Project","This is the fourth project"),B("Fifth Project","This is the fifth project");const z=document.querySelector(".project-display"),Y=document.querySelector(".my-projects"),O=(document.querySelector(".single-project-display"),document.querySelector(".single-project-tasks")),Z=document.querySelector(".single-project-rename"),R=document.querySelector(".single-project-redesc"),H=document.querySelector(".single-project-remove");z.addEventListener("click",(function(e){const t=e.target.closest(".project");t&&(z.classList.contains("hidden")||z.classList.add("hidden"),O.classList.contains("hidden")&&O.classList.remove("hidden"),N(t.querySelector(".project-name").textContent),F())})),Y.addEventListener("click",(function(){v()})),Z.addEventListener("click",(function(e){const t=e.target.closest(".single-project-details").querySelector(".single-project-name").textContent;q.setProjectName(t),q.setAskUserTask("changeProjectName"),$("enter new name")})),R.addEventListener("click",(function(e){const t=e.target.closest(".single-project-details").querySelector(".single-project-name").textContent;q.setProjectName(t),q.setAskUserTask("changeProjectDesc"),$("enter new desc")})),H.addEventListener("click",(function(e){(e=>{const t=h.getProjects(),n=t.findIndex((t=>t.name===e));-1!==n?(t.splice(n,1),b.removeProject(e),h.updateProject(t),y(`Project ${e} is removed!`),v()):y(`Project ${e} does not exist`)})(e.target.closest(".single-project-details").querySelector(".single-project-name").textContent)})),M("Default Project","Task 1","Desc 1","2023-02-20","low","notes on task"),M("Default Project","Task 2","Desc 2","2023-2-21","normal","notes on task"),M("Default Project","Task 3","Desc 3","2023-2-22","high","notes on task");const W=document.querySelector(".add-task"),J=document.querySelector(".create-task-button"),Q=document.querySelector(".my-tasks"),X=document.querySelector(".tasks-display"),_=(document.querySelector(".single-task-display"),document.querySelector(".single-task-rename")),G=document.querySelector(".single-task-redesc"),V=document.querySelector(".single-task-renotes"),K=document.querySelector(".single-task-redue"),ee=document.querySelector(".single-task-repriority"),te=document.querySelector(".single-task-restatus"),ne=function(){const e=document.querySelector(".single-task-project"),t=document.querySelector(".single-task-name");q.setTaskName(t.textContent),q.setProjectName(e.textContent)};W.addEventListener("click",(function(){const e=document.querySelector(".add-task-form");e.classList.contains("hidden")&&e.classList.remove("hidden")})),J.addEventListener("click",(function(e){e.preventDefault();const t=document.querySelector(".single-project-name").textContent,n=document.forms.addTaskForm,s=new FormData(n);M(t,s.get("taskName"),s.get("taskDesc"),s.get("taskDue"),s.get("taskPriority"),s.get("taskNotes")),n.reset();const a=document.querySelector(".add-task-form");a.classList.contains("hidden")||a.classList.add("hidden")})),Q.addEventListener("click",(function(){F()})),X.addEventListener("click",(function(e){const t=e.target.closest(".task");t&&P(t.querySelector(".display-task-project").textContent,t.querySelector(".display-task-name").textContent)})),_.addEventListener("click",(function(){ne(),q.setAskUserTask("changeTaskName"),$("enter new task name")})),G.addEventListener("click",(function(){ne(),q.setAskUserTask("changeTaskDesc"),$("enter new task desc")})),K.addEventListener("click",(function(){ne(),q.setAskUserTask("changeTaskDue"),$("enter new task due")})),V.addEventListener("click",(function(){ne(),q.setAskUserTask("changeTaskNotes"),$("enter new task notes")})),ee.addEventListener("click",(function(){ne(),q.setAskUserTask("changeTaskPriority"),$("enter new task priority")})),te.addEventListener("click",(function(){ne(),q.setAskUserTask("changeTaskStatus"),$("enter new task status")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNeEgsT0FBT2lLLFFBQVEsU0FDOUJ0RSxHQUNGLEVBQ0VBLEVBQUt4RixjQUFjLHlCQUF5QnVELFlBQzVDaUMsRUFBS3hGLGNBQWMsc0JBQXNCdUQsWUFHL0MsSUFpREEyRyxFQUF1Qi9HLGlCQUFpQixTQXhDZCxXQUN4QnFILEtBQ0EsaUJBQTRCLGtCQUM1QixFQUFRLHNCQUNWLElBcUNBTCxFQUF1QmhILGlCQUFpQixTQW5DZCxXQUN4QnFILEtBQ0EsaUJBQTRCLGtCQUM1QixFQUFRLHNCQUNWLElBZ0NBSCxFQUFzQmxILGlCQUFpQixTQTlCZCxXQUN2QnFILEtBQ0EsaUJBQTRCLGlCQUM1QixFQUFRLHFCQUNWLElBMkJBSixFQUF3QmpILGlCQUFpQixTQXpCZCxXQUN6QnFILEtBQ0EsaUJBQTRCLG1CQUM1QixFQUFRLHVCQUNWLElBc0JBRixHQUEyQm5ILGlCQUFpQixTQXBCZCxXQUM1QnFILEtBQ0EsaUJBQTRCLHNCQUM1QixFQUFRLDBCQUNWLElBaUJBRCxHQUF5QnBILGlCQUFpQixTQWZkLFdBQzFCcUgsS0FDQSxpQkFBNEIsb0JBQzVCLEVBQVEsd0JBQ1YsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG9hcHAvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3RvZG9hcHAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9kb2FwcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90b2RvYXBwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90b2RvYXBwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9kb2FwcC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vc3JjL21vZHVsZXMvTWVzc2FnZXMuanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9tb2R1bGVzL1Byb2plY3RNb2R1bGVzL1Byb2plY3RMb2NhbFN0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9tb2R1bGVzL1Byb2plY3RNb2R1bGVzL1Byb2plY3REaXNwbGF5RE9NLmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS90b0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9tb2R1bGVzL1Rhc2tNb2R1bGVzL1Rhc2tMb2NhbFN0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9tb2R1bGVzL1ZhbGlkYXRpb25zLmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVmFsaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9tb2R1bGVzL1Byb2plY3RNb2R1bGVzL1Byb2plY3RBZGRQcm9qZWN0LmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9zcmMvbW9kdWxlcy9Qcm9qZWN0TW9kdWxlcy9Qcm9qZWN0Q2xhc3MuanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9tb2R1bGVzL1Byb2plY3RNb2R1bGVzL1Byb2plY3RGb3JtSGFuZGxpbmcuanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9tb2R1bGVzL1Byb2plY3RNb2R1bGVzL1Byb2plY3REaXNwbGF5U2luZ2xlUHJvamVjdERPTS5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vc3JjL21vZHVsZXMvUHJvamVjdE1vZHVsZXMvUHJvamVjdFJlYWRPbmVQcm9qZWN0LmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9zcmMvbW9kdWxlcy9HbG9iYWxWYWx1ZXMuanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9tb2R1bGVzL1Rhc2tNb2R1bGVzL1Rhc2tEaXNwbGF5U2luZ2xlVGFza0RPTS5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vc3JjL21vZHVsZXMvQXNrVXNlci5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vc3JjL21vZHVsZXMvUHJvamVjdE1vZHVsZXMvUHJvamVjdFVwZGF0ZVByb2plY3REZXNjLmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9zcmMvbW9kdWxlcy9Qcm9qZWN0TW9kdWxlcy9Qcm9qZWN0VXBkYXRlUHJvamVjdE5hbWUuanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9tb2R1bGVzL1Rhc2tNb2R1bGVzL1Rhc2tVcGRhdGVUYXNrTmFtZS5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vc3JjL21vZHVsZXMvVGFza01vZHVsZXMvVGFza1VwZGF0ZVRhc2tEZXNjLmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9zcmMvbW9kdWxlcy9UYXNrTW9kdWxlcy9UYXNrVXBkYXRlRHVlLmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9zcmMvbW9kdWxlcy9UYXNrTW9kdWxlcy9UYXNrVXBkYXRlTm90ZXMuanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9tb2R1bGVzL1Rhc2tNb2R1bGVzL1Rhc2tVcGRhdGVQcmlvcml0eS5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vc3JjL21vZHVsZXMvVGFza01vZHVsZXMvVGFza1VwZGF0ZVN0YXR1cy5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vc3JjL21vZHVsZXMvVGFza01vZHVsZXMvVGFza0Rpc3BsYXlET00uanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9tb2R1bGVzL1Rhc2tNb2R1bGVzL1Rhc2tBZGRUYXNrLmpzIiwid2VicGFjazovL3RvZG9hcHAvLi9zcmMvbW9kdWxlcy9UYXNrTW9kdWxlcy9UYXNrQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vdG9kb2FwcC8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvYXBwLy4vc3JjL21vZHVsZXMvUHJvamVjdE1vZHVsZXMvUHJvamVjdFJlbW92ZVByb2plY3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbmJvZHl7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5jb250ZW50IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG5cXG4ucHJvamVjdC1kaXNwbGF5LCAudGFza3MtZGlzcGxheXtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZ2FwOjFyZW07XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogYW50aXF1ZXdoaXRlO1xcbiAgbWFyZ2luOiAxcmVtO1xcbiAgYm9yZGVyLXJhZGl1czogMXJlbTtcXG4gIGJveC1zaGFkb3c6IHJnYmEoMTAwLCAxMDAsIDExMSwgMC4yKSAwcHggN3B4IDI5cHggMHB4O1xcbiAgZmxleDoxO1xcbn1cXG5cXG4ucHJvamVjdCwgLnRhc2t7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICM0NTM5ODY7XFxuICBtaW4td2lkdGg6IDEwJTtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxufVxcblxcbi5wcm9qZWN0e1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAwLjI1ZnIgMmZyIDRmciAwLjVmcjtcXG59XFxuXFxuLnRhc2t7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnIgMWZyIDFmciAzZnIgMWZyO1xcbn1cXG5cXG4ubmF2LWJhciwgLnRhc2stbmF2LWJhcntcXG4gIHBhZGRpbmc6MXJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxZTI5M2IgO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgZ2FwOiAxcmVtO1xcbn1cXG5cXG4ub2tCdXR0b25EaXYgLCAuYXNrVXNlckRpdntcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMjAlO1xcbiAgbGVmdDogY2FsYygoMTAwdncgLSA0MDBweCkvMik7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBhbGljZWJsdWU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAvKiBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgKi9cXG4gIHBhZGRpbmc6IDFyZW07XFxuICBnYXA6IDJyZW07XFxuICBib3JkZXItcmFkaXVzOiAxcmVtO1xcbiAgbWF4LXdpZHRoOiA0MDBweDtcXG4gIG1pbi13aWR0aDogNDAwcHg7XFxufVxcblxcbi5hc2tVc2VyVGV4dEFyZWF7XFxuICByZXNpemU6IHZlcnRpY2FsO1xcbiAgYmFja2dyb3VuZDogI2YzZjNmMztcXG4gIG92ZXJmbG93OiBhdXRvO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLm9rQnV0dG9uRGl2ID4gLnB1cnBsZS1idXR0b24ge1xcbiAgd2lkdGg6IDQwMHB4O1xcbn1cXG5cXG4uYWRkLXByb2plY3QtZm9ybSxcXG4uYWRkLXRhc2stZm9ybSB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDIwJTtcXG4gIGxlZnQ6IGNhbGMoKDEwMHZ3IC0gNDM3cHgpLzIpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2NmZmFmZTtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgZ2FwOiAycmVtO1xcbiAgYm9yZGVyLXJhZGl1czogMXJlbTtcXG59XFxuXFxuI2FkZFByb2plY3RGb3JtLCAjYWRkVGFza0Zvcm17XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGJveC1zaGFkb3c6ICNjZmZhZmUgMHB4IDdweCAyOXB4IDBweDtcXG59XFxuXFxuI2FkZFByb2plY3RGb3JtID4gZGl2LFxcbiAjYWRkUHJvamVjdEZvcm0gPiBidXR0b24sXFxuICNhZGRUYXNrRm9ybSA+IGRpdiwgXFxuICNhZGRUYXNrRm9ybSA+IGJ1dHRvbntcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07XFxufVxcblxcbi5zaW5nbGUtcHJvamVjdC1kZXRhaWxze1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDJmciAzZnI7XFxuICBnYXA6IDFyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWZmNmZmO1xcbn1cXG5cXG4uc2luZ2xlLXByb2plY3QtZGV0YWlscy13cmFwcGVye1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDFmcjtcXG4gIHBhZGRpbmcgOiAwO1xcbiAgbWFyZ2luOiAxcmVtO1xcbn1cXG5cXG4uc2luZ2xlLXByb2plY3QtZGV0YWlscy13cmFwcGVyID4gLnB1cnBsZS1idXR0b24sXFxuLnNpbmdsZS10YXNrLWRldGFpbHMtd3JhcHBlciA+IC5wdXJwbGUtYnV0dG9ue1xcbiAgcGFkZGluZzogMC4yNXJlbTtcXG4gIG1heC13aWR0aDogZml0LWNvbnRlbnQ7XFxuICBtYXgtaGVpZ2h0OiAycmVtO1xcbn1cXG5cXG4uc2luZ2xlLXByb2plY3QtdGFza3N7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbn1cXG5cXG4uc2luZ2xlLXRhc2stZGlzcGxheXtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmU0ZTY7XFxuICBib3JkZXItcmFkaXVzOiAxcmVtO1xcbiAgbWFyZ2luOiAycmVtO1xcbiAgYm94LXNoYWRvdzogcmdiYSgxMDAsIDEwMCwgMTExLCAwLjIpIDBweCA3cHggMjlweCAwcHg7XFxufVxcblxcbi5zaW5nbGUtdGFzay1kZXRhaWxzLXdyYXBwZXJ7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgNGZyIDFmcjtcXG4gIG1hcmdpbjoxcmVtO1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICM0NTM5ODY7XFxufVxcblxcbi5zaW5nbGUtdGFzay1kZXRhaWxzLXdyYXBwZXIgPiBkaXYsIC5zaW5nbGUtdGFzay1kZXRhaWxzLXdyYXBwZXIgPiBidXR0b257XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xcbn1cXG5cXG4ubGVmdHtcXG4gIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XFxufVxcblxcbi5jZW50ZXJ7XFxuICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxufVxcblxcbi5yaWdodHtcXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xcbn1cXG5cXG4ucHVycGxlLWJ1dHRvbntcXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxuICBiYWNrZ3JvdW5kOiAjNDMzOGNhO1xcbiAgYm9yZGVyOiAwO1xcbiAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xcbiAgY29sb3I6ICNmZmY7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBmb250OiBpbmhlcml0O1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgcGFkZGluZzogMC43ZW0gMWVtO1xcbn1cXG5cXG5pbnB1dFt0eXBlPVxcXCJ0ZXh0XFxcIl0ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3JkZXI6IDA7XFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgZ3JheTtcXG4gIG91dGxpbmU6IDA7XFxuICBmb250LXNpemU6IDEuM3JlbTtcXG4gIGNvbG9yOiBibGFjaztcXG4gIHBhZGRpbmc6IDRweCAwO1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICB0cmFuc2l0aW9uOiBib3JkZXItY29sb3IgMC4ycztcXG59XFxuXFxuLmhpZGRlbiB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uYmlnLXRleHR7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGZvbnQtc2l6ZTogNXJlbTtcXG59XFxuXFxuLm1lZGl1bS10ZXh0e1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDIuNXJlbTtcXG59XFxuXFxuLnNtYWxsLXRleHR7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGZvbnQtc2l6ZTogMS4ycmVtO1xcbn1cXG5cXG4ud2hpdGUtdGV4dHtcXG4gIGNvbG9yOiAjZjhmYWZjO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsU0FBUztFQUNULFVBQVU7QUFDWjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLFFBQVE7RUFDUixhQUFhO0VBQ2IsOEJBQThCO0VBQzlCLFlBQVk7RUFDWixtQkFBbUI7RUFDbkIscURBQXFEO0VBQ3JELE1BQU07QUFDUjs7QUFFQTtFQUNFLGVBQWU7RUFDZixhQUFhO0VBQ2IsZ0NBQWdDO0VBQ2hDLGNBQWM7RUFDZCxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSwyQ0FBMkM7QUFDN0M7O0FBRUE7RUFDRSw4Q0FBOEM7QUFDaEQ7O0FBRUE7RUFDRSxZQUFZO0VBQ1osMEJBQTBCO0VBQzFCLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsU0FBUztBQUNYOztBQUVBO0VBQ0UsZUFBZTtFQUNmLFFBQVE7RUFDUiw2QkFBNkI7RUFDN0IsMkJBQTJCO0VBQzNCLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsbUJBQW1CO0VBQ25CLDZCQUE2QjtFQUM3QixhQUFhO0VBQ2IsU0FBUztFQUNULG1CQUFtQjtFQUNuQixnQkFBZ0I7RUFDaEIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLG1CQUFtQjtFQUNuQixjQUFjO0VBQ2Qsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBOztFQUVFLGVBQWU7RUFDZixRQUFRO0VBQ1IsNkJBQTZCO0VBQzdCLHlCQUF5QjtFQUN6QixzQkFBc0I7RUFDdEIsbUJBQW1CO0VBQ25CLHVCQUF1QjtFQUN2QixhQUFhO0VBQ2IsU0FBUztFQUNULG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsb0NBQW9DO0FBQ3RDOztBQUVBOzs7O0VBSUUsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLGtDQUFrQztFQUNsQyxTQUFTO0VBQ1QseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLDJCQUEyQjtFQUMzQixXQUFXO0VBQ1gsWUFBWTtBQUNkOztBQUVBOztFQUVFLGdCQUFnQjtFQUNoQixzQkFBc0I7RUFDdEIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLG1CQUFtQjtFQUNuQixZQUFZO0VBQ1oscURBQXFEO0FBQ3ZEOztBQUVBO0VBQ0UsYUFBYTtFQUNiLGtDQUFrQztFQUNsQyxXQUFXO0VBQ1gsZ0NBQWdDO0FBQ2xDOztBQUVBO0VBQ0UsYUFBYTtFQUNiLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLG9CQUFvQjtBQUN0Qjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixtQkFBbUI7RUFDbkIsU0FBUztFQUNULHFCQUFxQjtFQUNyQixXQUFXO0VBQ1gsZUFBZTtFQUNmLGFBQWE7RUFDYixnQkFBZ0I7RUFDaEIsY0FBYztFQUNkLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxTQUFTO0VBQ1QsNkJBQTZCO0VBQzdCLFVBQVU7RUFDVixpQkFBaUI7RUFDakIsWUFBWTtFQUNaLGNBQWM7RUFDZCx1QkFBdUI7RUFDdkIsNkJBQTZCO0FBQy9COztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGNBQWM7QUFDaEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5ib2R5e1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4uY29udGVudCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXFxuLnByb2plY3QtZGlzcGxheSwgLnRhc2tzLWRpc3BsYXl7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDoxcmVtO1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6IGFudGlxdWV3aGl0ZTtcXG4gIG1hcmdpbjogMXJlbTtcXG4gIGJvcmRlci1yYWRpdXM6IDFyZW07XFxuICBib3gtc2hhZG93OiByZ2JhKDEwMCwgMTAwLCAxMTEsIDAuMikgMHB4IDdweCAyOXB4IDBweDtcXG4gIGZsZXg6MTtcXG59XFxuXFxuLnByb2plY3QsIC50YXNre1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjNDUzOTg2O1xcbiAgbWluLXdpZHRoOiAxMCU7XFxuICBkaXNwbGF5OiBncmlkO1xcbn1cXG5cXG4ucHJvamVjdHtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMC4yNWZyIDJmciA0ZnIgMC41ZnI7XFxufVxcblxcbi50YXNre1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyIDFmciAxZnIgM2ZyIDFmcjtcXG59XFxuXFxuLm5hdi1iYXIsIC50YXNrLW5hdi1iYXJ7XFxuICBwYWRkaW5nOjFyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWUyOTNiIDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGdhcDogMXJlbTtcXG59XFxuXFxuLm9rQnV0dG9uRGl2ICwgLmFza1VzZXJEaXZ7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDIwJTtcXG4gIGxlZnQ6IGNhbGMoKDEwMHZ3IC0gNDAwcHgpLzIpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogYWxpY2VibHVlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgLyoganVzdGlmeS1jb250ZW50OiBjZW50ZXI7ICovXFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgZ2FwOiAycmVtO1xcbiAgYm9yZGVyLXJhZGl1czogMXJlbTtcXG4gIG1heC13aWR0aDogNDAwcHg7XFxuICBtaW4td2lkdGg6IDQwMHB4O1xcbn1cXG5cXG4uYXNrVXNlclRleHRBcmVhe1xcbiAgcmVzaXplOiB2ZXJ0aWNhbDtcXG4gIGJhY2tncm91bmQ6ICNmM2YzZjM7XFxuICBvdmVyZmxvdzogYXV0bztcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi5va0J1dHRvbkRpdiA+IC5wdXJwbGUtYnV0dG9uIHtcXG4gIHdpZHRoOiA0MDBweDtcXG59XFxuXFxuLmFkZC1wcm9qZWN0LWZvcm0sXFxuLmFkZC10YXNrLWZvcm0ge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAyMCU7XFxuICBsZWZ0OiBjYWxjKCgxMDB2dyAtIDQzN3B4KS8yKTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjZmZhZmU7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGdhcDogMnJlbTtcXG4gIGJvcmRlci1yYWRpdXM6IDFyZW07XFxufVxcblxcbiNhZGRQcm9qZWN0Rm9ybSwgI2FkZFRhc2tGb3Jte1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBib3gtc2hhZG93OiAjY2ZmYWZlIDBweCA3cHggMjlweCAwcHg7XFxufVxcblxcbiNhZGRQcm9qZWN0Rm9ybSA+IGRpdixcXG4gI2FkZFByb2plY3RGb3JtID4gYnV0dG9uLFxcbiAjYWRkVGFza0Zvcm0gPiBkaXYsIFxcbiAjYWRkVGFza0Zvcm0gPiBidXR0b257XFxuICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcbn1cXG5cXG4uc2luZ2xlLXByb2plY3QtZGV0YWlsc3tcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAyZnIgM2ZyO1xcbiAgZ2FwOiAxcmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VmZjZmZjtcXG59XFxuXFxuLnNpbmdsZS1wcm9qZWN0LWRldGFpbHMtd3JhcHBlcntcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmciAxZnI7XFxuICBwYWRkaW5nIDogMDtcXG4gIG1hcmdpbjogMXJlbTtcXG59XFxuXFxuLnNpbmdsZS1wcm9qZWN0LWRldGFpbHMtd3JhcHBlciA+IC5wdXJwbGUtYnV0dG9uLFxcbi5zaW5nbGUtdGFzay1kZXRhaWxzLXdyYXBwZXIgPiAucHVycGxlLWJ1dHRvbntcXG4gIHBhZGRpbmc6IDAuMjVyZW07XFxuICBtYXgtd2lkdGg6IGZpdC1jb250ZW50O1xcbiAgbWF4LWhlaWdodDogMnJlbTtcXG59XFxuXFxuLnNpbmdsZS1wcm9qZWN0LXRhc2tze1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG59XFxuXFxuLnNpbmdsZS10YXNrLWRpc3BsYXl7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZlNGU2O1xcbiAgYm9yZGVyLXJhZGl1czogMXJlbTtcXG4gIG1hcmdpbjogMnJlbTtcXG4gIGJveC1zaGFkb3c6IHJnYmEoMTAwLCAxMDAsIDExMSwgMC4yKSAwcHggN3B4IDI5cHggMHB4O1xcbn1cXG5cXG4uc2luZ2xlLXRhc2stZGV0YWlscy13cmFwcGVye1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDRmciAxZnI7XFxuICBtYXJnaW46MXJlbTtcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjNDUzOTg2O1xcbn1cXG5cXG4uc2luZ2xlLXRhc2stZGV0YWlscy13cmFwcGVyID4gZGl2LCAuc2luZ2xlLXRhc2stZGV0YWlscy13cmFwcGVyID4gYnV0dG9ue1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcXG59XFxuXFxuLmxlZnR7XFxuICBhbGlnbi1zZWxmOiBmbGV4LXN0YXJ0O1xcbn1cXG5cXG4uY2VudGVye1xcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xcbn1cXG5cXG4ucmlnaHR7XFxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcXG59XFxuXFxuLnB1cnBsZS1idXR0b257XFxuICBhcHBlYXJhbmNlOiBub25lO1xcbiAgYmFja2dyb3VuZDogIzQzMzhjYTtcXG4gIGJvcmRlcjogMDtcXG4gIGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZm9udDogaW5oZXJpdDtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIHBhZGRpbmc6IDAuN2VtIDFlbTtcXG59XFxuXFxuaW5wdXRbdHlwZT1cXFwidGV4dFxcXCJdIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm9yZGVyOiAwO1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIGdyYXk7XFxuICBvdXRsaW5lOiAwO1xcbiAgZm9udC1zaXplOiAxLjNyZW07XFxuICBjb2xvcjogYmxhY2s7XFxuICBwYWRkaW5nOiA0cHggMDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbiAgdHJhbnNpdGlvbjogYm9yZGVyLWNvbG9yIDAuMnM7XFxufVxcblxcbi5oaWRkZW4ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmJpZy10ZXh0e1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDVyZW07XFxufVxcblxcbi5tZWRpdW0tdGV4dHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgZm9udC1zaXplOiAyLjVyZW07XFxufVxcblxcbi5zbWFsbC10ZXh0e1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDEuMnJlbTtcXG59XFxuXFxuLndoaXRlLXRleHR7XFxuICBjb2xvcjogI2Y4ZmFmYztcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiY29uc3Qgb2tCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm9rQnV0dG9uXCIpO1xuY29uc3Qgb2tCdXR0b25EaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm9rQnV0dG9uRGl2XCIpO1xuY29uc3Qgb2tCdXR0b25UZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5va0J1dHRvblRleHRcIik7XG5cbmNvbnN0IGRpc3BsYXlNZXNzYWdlID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICBva0J1dHRvblRleHQudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xuICBva0J1dHRvbkRpdi5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xufVxuXG5jb25zdCByZW1vdmVNZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gIG9rQnV0dG9uRGl2LmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG59XG5cbm9rQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxyZW1vdmVNZXNzYWdlKTtcblxuZXhwb3J0IGRlZmF1bHQgZGlzcGxheU1lc3NhZ2U7XG4iLCJjbGFzcyBQcm9qZWN0TG9jYWxTdG9yYWdlIHtcbiAgc3RhdGljIGdldFByb2plY3RzKCkge1xuICAgIGNvbnN0IHByb2plY3RzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJwcm9qZWN0c1wiKTtcbiAgICBpZiAocHJvamVjdHMgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04ucGFyc2UocHJvamVjdHMpO1xuICB9XG5cbiAgc3RhdGljIHVwZGF0ZVByb2plY3QocHJvamVjdHMpIHtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcInByb2plY3RzXCIpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwicHJvamVjdHNcIiwgSlNPTi5zdHJpbmdpZnkocHJvamVjdHMpKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcm9qZWN0TG9jYWxTdG9yYWdlO1xuIiwiaW1wb3J0IFByb2plY3RMb2NhbFN0b3JhZ2UgZnJvbSBcIi4vUHJvamVjdExvY2FsU3RvcmFnZVwiO1xuXG5jb25zdCBkaXNwbGF5UHJvamVjdHNPbkRvbSA9ICgpID0+IHtcbiAgY29uc3Qgc2luZ2xlUHJvamVjdERpc3BsYXlEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgIFwiLnNpbmdsZS1wcm9qZWN0LWRpc3BsYXlcIlxuICApO1xuICBjb25zdCBzaW5nbGVQcm9qZWN0VGFza3NEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNpbmdsZS1wcm9qZWN0LXRhc2tzXCIpO1xuICBjb25zdCBzaW5nbGVUYXNrRGlzcGxheURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2luZ2xlLXRhc2stZGlzcGxheVwiKTtcbiAgaWYgKCFzaW5nbGVQcm9qZWN0RGlzcGxheURpdi5jbGFzc0xpc3QuY29udGFpbnMoXCJoaWRkZW5cIikpIHtcbiAgICBzaW5nbGVQcm9qZWN0RGlzcGxheURpdi5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICB9XG4gIGlmICghc2luZ2xlUHJvamVjdFRhc2tzRGl2LmNsYXNzTGlzdC5jb250YWlucyhcImhpZGRlblwiKSkge1xuICAgIHNpbmdsZVByb2plY3RUYXNrc0Rpdi5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICB9XG4gIGlmICghc2luZ2xlVGFza0Rpc3BsYXlEaXYuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaGlkZGVuXCIpKSB7XG4gICAgc2luZ2xlVGFza0Rpc3BsYXlEaXYuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgfVxuXG4gIGNvbnN0IHByb2plY3REaXNwbGF5RGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qZWN0LWRpc3BsYXlcIik7XG4gIGlmIChwcm9qZWN0RGlzcGxheURpdi5jbGFzc0xpc3QuY29udGFpbnMoXCJoaWRkZW5cIikpIHtcbiAgICBwcm9qZWN0RGlzcGxheURpdi5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xuICB9XG4gIHByb2plY3REaXNwbGF5RGl2LmlubmVySFRNTCA9IFwiXCI7XG4gIGNvbnN0IHByb2plY3REaXZUZW1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgcHJvamVjdERpdlRlbXAuY2xhc3NMaXN0LmFkZChcInByb2plY3RcIik7XG4gIHByb2plY3REaXZUZW1wLmlubmVySFRNTCA9IGBcbiAgPGRpdiBjbGFzcz1cInByb2plY3Qtbm8gc21hbGwtdGV4dFwiPk5vLjwvZGl2PlxuICA8ZGl2IGNsYXNzPVwicHJvamVjdC1uYW1lIHNtYWxsLXRleHRcIj5OYW1lPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInByb2plY3QtZGVzYyBzbWFsbC10ZXh0XCI+RGVzY3JpcHRpb248L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicHJvamVjdC1kYXRlIHNtYWxsLXRleHRcIj5EYXRlIENyZWF0ZWQ8L2Rpdj5gO1xuICBwcm9qZWN0RGlzcGxheURpdi5hcHBlbmRDaGlsZChwcm9qZWN0RGl2VGVtcCk7XG4gIGNvbnN0IHByb2plY3RzID0gUHJvamVjdExvY2FsU3RvcmFnZS5nZXRQcm9qZWN0cygpO1xuICBsZXQgY291bnRlciA9IDA7XG4gIHByb2plY3RzLmZvckVhY2goKHByb2plY3QpID0+IHtcbiAgICBjb3VudGVyKz0xO1xuICAgIGNvbnN0IHByb2plY3REaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHByb2plY3REaXYuY2xhc3NMaXN0LmFkZChcInByb2plY3RcIik7XG4gICAgcHJvamVjdERpdi5pbm5lckhUTUwgPSBgPGRpdiBjbGFzcz1cInByb2plY3Qtbm8gc21hbGwtdGV4dFwiPiR7Y291bnRlcn08L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicHJvamVjdC1uYW1lIHNtYWxsLXRleHRcIj4ke3Byb2plY3QubmFtZX08L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicHJvamVjdC1kZXNjIHNtYWxsLXRleHRcIj4ke3Byb2plY3QuZGVzY308L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicHJvamVjdC1kYXRlIHNtYWxsLXRleHRcIj4ke3Byb2plY3QuZGF0ZX08L2Rpdj5gO1xuICAgIHByb2plY3REaXNwbGF5RGl2LmFwcGVuZENoaWxkKHByb2plY3REaXYpO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGRpc3BsYXlQcm9qZWN0c09uRG9tO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZWRBcmdzKHJlcXVpcmVkLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA8IHJlcXVpcmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXF1aXJlZCArICcgYXJndW1lbnQnICsgKHJlcXVpcmVkID4gMSA/ICdzJyA6ICcnKSArICcgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmdzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG59IiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIHZhbHVlIGEgZGF0ZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZS4gVGhlIGZ1bmN0aW9uIHdvcmtzIGZvciBkYXRlcyB0cmFuc2ZlcnJlZCBhY3Jvc3MgaWZyYW1lcy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gdGhlIHZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKE5hTikpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHNvbWUgdmFsdWU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoJzIwMTQtMDItMzEnKVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gb2JqZWN0OlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKHt9KVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fCBfdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufSIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7IC8vIENsb25lIHRoZSBkYXRlXG5cbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCBfdHlwZW9mKGFyZ3VtZW50KSA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI3N0cmluZy1hcmd1bWVudHNcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJjbGFzcyBUYXNrTG9jYWxTdG9yYWdle1xuICAgIHN0YXRpYyBnZXRUYXNrKHByb2plY3Qpe1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwcm9qZWN0KSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHVwZGF0ZVRhc2socHJvamVjdCwgdGFza3Mpe1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShwcm9qZWN0KTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0ocHJvamVjdCxKU09OLnN0cmluZ2lmeSh0YXNrcykpO1xuICAgIH1cblxuICAgIHN0YXRpYyBhZGRQcm9qZWN0KG5hbWUpe1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShuYW1lLEpTT04uc3RyaW5naWZ5KFtdKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHJlbW92ZVByb2plY3QobmFtZSl7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKG5hbWUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRTaW5nbGVUYXNrKHByb2plY3QsbmFtZSl7XG4gICAgICAgIHJldHVybiAodGhpcy5nZXRUYXNrKHByb2plY3QpKS5maW5kKHRhc2sgPT4gdGFzay5uYW1lID09PSBuYW1lKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGFza0xvY2FsU3RvcmFnZTsiLCJpbXBvcnQgaXNWYWxpZCBmcm9tIFwiZGF0ZS1mbnMvaXNWYWxpZFwiO1xuaW1wb3J0IFByb2plY3RMb2NhbFN0b3JhZ2UgZnJvbSBcIi4vUHJvamVjdE1vZHVsZXMvUHJvamVjdExvY2FsU3RvcmFnZVwiO1xuaW1wb3J0IFRhc2tMb2NhbFN0b3JhZ2UgZnJvbSBcIi4vVGFza01vZHVsZXMvVGFza0xvY2FsU3RvcmFnZVwiO1xuXG5jbGFzcyBWYWxpZGF0aW9ucyB7XG4gIHN0YXRpYyB2YWxpZGF0ZURhdGUoZGF0ZSkge1xuICAgIC8vIHRoaXMgaXNWYWxpZCBtdXN0IGJlIGEgZnVuY3Rpb24gZnJvbSBkYXRlLWZuc1xuICAgIC8vIHl5eXktbW0tZGRcbiAgICBjb25zdCBhcnIgPSBkYXRlLnNwbGl0KFwiLVwiKTtcbiAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMykge1xuICAgICAgaWYgKGFyclswXSA+PSAxICYmIGFyclswXSA8PSA5OTk5KSB7XG4gICAgICAgIGlmIChhcnJbMV0gPj0gMSAmJiBhcnJbMV0gPD0gMTIpIHtcbiAgICAgICAgICBpZiAoYXJyWzJdID49IDEgJiYgYXJyWzJdIDw9IDMxKSB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZChuZXcgRGF0ZShhcnJbMF0sIGFyclsxXSwgYXJyWzJdKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyB2YWxpZGF0ZU5hbWUobmFtZSkge1xuICAgIGlmIChuYW1lLmxlbmd0aCA+PSAxICYmIG5hbWUubGVuZ3RoIDw9IDUwKSB7XG4gICAgICBpZiAobmFtZS5tYXRjaCgvXlthLXpBLVowLTkgLl0rJC8pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGF0aWMgdmFsaWRhdGVEZXNjKGRlc2MpIHtcbiAgICBpZiAoZGVzYy5sZW5ndGggPj0gMSAmJiBkZXNjLmxlbmd0aCA8PSAxNDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGF0aWMgdmFsaWRhdGVQcm9qZWN0KG5hbWUpIHtcbiAgICBjb25zdCBwcm9qZWN0cyA9IFByb2plY3RMb2NhbFN0b3JhZ2UuZ2V0UHJvamVjdHMoKTtcbiAgICBjb25zdCBpbmRleCA9IHByb2plY3RzLmZpbmRJbmRleCgocHJvamVjdCkgPT4gcHJvamVjdC5uYW1lID09PSBuYW1lKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgc3RhdGljIHZhbGlkYXRlTm90ZXMobm90ZXMpIHtcbiAgICBpZiAobm90ZXMubGVuZ3RoID49IDEgJiYgbm90ZXMubGVuZ3RoIDw9IDE0MCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyB2YWxpZGF0ZVRhc2socHJvamVjdCxuYW1lKXtcbiAgICBjb25zdCB0YXNrcyA9IFRhc2tMb2NhbFN0b3JhZ2UuZ2V0VGFzayhwcm9qZWN0KTtcbiAgICBjb25zdCBpbmRleCA9IHRhc2tzLmZpbmRJbmRleCh0YXNrID0+IHRhc2submFtZSA9PT0gbmFtZSk7XG4gICAgaWYoaW5kZXggPT09IC0xKXtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVmFsaWRhdGlvbnM7XG4iLCJpbXBvcnQgaXNEYXRlIGZyb20gXCIuLi9pc0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNWYWxpZFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB2YWxpZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgZmFsc2UgaWYgYXJndW1lbnQgaXMgSW52YWxpZCBEYXRlIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAqIEFyZ3VtZW50IGlzIGNvbnZlcnRlZCB0byBEYXRlIHVzaW5nIGB0b0RhdGVgLiBTZWUgW3RvRGF0ZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGV9XG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiBAcGFyYW0geyp9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHZhbGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgyMDE0LCAxLCAzMSkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWx1ZSwgY29udmVydGFibGUgaW50byBhIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKDEzOTM4MDQ4MDAwMDApXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKCcnKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1ZhbGlkKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcblxuICBpZiAoIWlzRGF0ZShkaXJ0eURhdGUpICYmIHR5cGVvZiBkaXJ0eURhdGUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgcmV0dXJuICFpc05hTihOdW1iZXIoZGF0ZSkpO1xufSIsImltcG9ydCBkaXNwbGF5TWVzc2FnZSBmcm9tIFwiLi4vTWVzc2FnZXNcIjtcbmltcG9ydCBQcm9qZWN0IGZyb20gXCIuL1Byb2plY3RDbGFzc1wiO1xuaW1wb3J0IGRpc3BsYXlQcm9qZWN0c09uRG9tIGZyb20gXCIuL1Byb2plY3REaXNwbGF5RE9NXCI7XG5pbXBvcnQgUHJvamVjdExvY2FsU3RvcmFnZSBmcm9tIFwiLi9Qcm9qZWN0TG9jYWxTdG9yYWdlXCI7XG5pbXBvcnQgVmFsaWRhdGlvbnMgZnJvbSBcIi4uL1ZhbGlkYXRpb25zXCI7XG5pbXBvcnQgVGFza0xvY2FsU3RvcmFnZSBmcm9tIFwiLi4vVGFza01vZHVsZXMvVGFza0xvY2FsU3RvcmFnZVwiO1xuXG5jb25zdCBhZGRQcm9qZWN0ID0gKG5hbWUsIGRlc2MpID0+IHtcbiAgaWYgKFZhbGlkYXRpb25zLnZhbGlkYXRlTmFtZShuYW1lKSAmJiBWYWxpZGF0aW9ucy52YWxpZGF0ZURlc2MoZGVzYykpIHtcbiAgICBjb25zdCBwcm9qZWN0cyA9IFByb2plY3RMb2NhbFN0b3JhZ2UuZ2V0UHJvamVjdHMoKTtcbiAgICBpZiAocHJvamVjdHMuZmluZEluZGV4KChwcm9qZWN0KSA9PiBwcm9qZWN0Lm5hbWUgPT09IG5hbWUpICE9PSAtMSkge1xuICAgICAgZGlzcGxheU1lc3NhZ2UoXCJUaGlzIHByb2plY3QgYWxyZWFkeSBleGlzdHMhXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwcm9qZWN0cy5wdXNoKG5ldyBQcm9qZWN0KG5hbWUsIGRlc2MpKTtcbiAgICBUYXNrTG9jYWxTdG9yYWdlLmFkZFByb2plY3QobmFtZSk7XG4gICAgUHJvamVjdExvY2FsU3RvcmFnZS51cGRhdGVQcm9qZWN0KHByb2plY3RzKTtcbiAgICBkaXNwbGF5TWVzc2FnZShgUHJvamVjdCAke25hbWV9IGNyZWF0ZWRgKTtcbiAgICBkaXNwbGF5UHJvamVjdHNPbkRvbSgpO1xuICB9IGVsc2Uge1xuICAgIGRpc3BsYXlNZXNzYWdlKGBQbGVhc2UgZW50ZXIgdmFsaWQgZGF0YVxuICAgIFxcbk5hbWUgbXVzdCBiZSBvbmx5IGxldHRlcnMgYW5kIG51bWJlcnMgYmV0d2VlbiAxIGFuZCA1MCBjaGFyYWN0ZXJzXG4gICAgXFxuRGVzY3JpcHRpb24gbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDE4MCBjaGFyYWN0ZXJzYCk7XG4gIH1cbiAgXG59O1xuXG5leHBvcnQgZGVmYXVsdCBhZGRQcm9qZWN0O1xuIiwiY2xhc3MgUHJvamVjdCB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIGRlc2MpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuZGVzYyA9IGRlc2M7XG4gICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgIHRoaXMuZGF0ZSA9IGAke3RvZGF5LmdldERhdGUoKX0tJHt0b2RheS5nZXRNb250aCgpKzF9LSR7dG9kYXkuZ2V0RnVsbFllYXIoKX1gO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb2plY3Q7XG4iLCJpbXBvcnQgYWRkUHJvamVjdCBmcm9tIFwiLi9Qcm9qZWN0QWRkUHJvamVjdFwiO1xuXG5jb25zdCBjcmVhdGVQcm9qZWN0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jcmVhdGUtcHJvamVjdC1idXR0b25cIik7XG5jb25zdCBhZGRQcm9qZWN0Rm9ybURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLXByb2plY3QtZm9ybVwiKTtcbmNvbnN0IGFkZFByb2plY3REaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZC1wcm9qZWN0XCIpO1xuXG5jb25zdCBjcmVhdGVQcm9qZWN0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5mb3Jtcy5hZGRQcm9qZWN0Rm9ybTtcbiAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSk7XG4gIGFkZFByb2plY3QoZm9ybURhdGEuZ2V0KFwicHJvamVjdE5hbWVcIiksIGZvcm1EYXRhLmdldChcInByb2plY3REZXNjXCIpKTtcbiAgYWRkUHJvamVjdEZvcm1EaXYuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gIGZvcm0ucmVzZXQoKTtcbn07XG5cbmNyZWF0ZVByb2plY3RCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNyZWF0ZVByb2plY3QpO1xuYWRkUHJvamVjdERpdi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBhZGRQcm9qZWN0Rm9ybURpdi5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVByb2plY3Q7XG4iLCJpbXBvcnQgcmVhZE9uZVByb2plY3QgZnJvbSBcIi4vUHJvamVjdFJlYWRPbmVQcm9qZWN0XCI7XG5cbmNvbnN0IGRpc3BsYXlTaW5nbGVQcm9qZWN0ID0gKG5hbWUpID0+IHtcbiAgY29uc3QgcHJvamVjdCA9IHJlYWRPbmVQcm9qZWN0KG5hbWUpO1xuICBjb25zdCBzaW5nbGVQcm9qZWN0RGlzcGxheURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaW5nbGUtcHJvamVjdC1kaXNwbGF5Jyk7XG4gIGNvbnN0IHNpbmdsZVRhc2tEaXNwbGF5RGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpbmdsZS10YXNrLWRpc3BsYXknKTtcbiAgY29uc3QgcHJvamVjdERpc3BsYXlEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2plY3QtZGlzcGxheVwiKTtcblxuICBpZihzaW5nbGVQcm9qZWN0RGlzcGxheURpdi5jbGFzc0xpc3QuY29udGFpbnMoXCJoaWRkZW5cIikpe1xuICAgIHNpbmdsZVByb2plY3REaXNwbGF5RGl2LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG4gIH1cbiAgaWYoIXNpbmdsZVRhc2tEaXNwbGF5RGl2LmNsYXNzTGlzdC5jb250YWlucyhcImhpZGRlblwiKSl7XG4gICAgc2luZ2xlVGFza0Rpc3BsYXlEaXYuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgfVxuICBpZighcHJvamVjdERpc3BsYXlEaXYuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaGlkZGVuXCIpKXtcbiAgICBwcm9qZWN0RGlzcGxheURpdi5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICB9XG4gIHNpbmdsZVByb2plY3REaXNwbGF5RGl2LnF1ZXJ5U2VsZWN0b3IoJy5zaW5nbGUtcHJvamVjdC1uYW1lJykudGV4dENvbnRlbnQgPSBwcm9qZWN0Lm5hbWU7XG4gIHNpbmdsZVByb2plY3REaXNwbGF5RGl2LnF1ZXJ5U2VsZWN0b3IoJy5zaW5nbGUtcHJvamVjdC1kZXNjJykudGV4dENvbnRlbnQgPSBwcm9qZWN0LmRlc2M7XG4gIHNpbmdsZVByb2plY3REaXNwbGF5RGl2LnF1ZXJ5U2VsZWN0b3IoJy5zaW5nbGUtcHJvamVjdC1kYXRlJykudGV4dENvbnRlbnQgPSBwcm9qZWN0LmRhdGU7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBkaXNwbGF5U2luZ2xlUHJvamVjdDtcbiIsImltcG9ydCBkaXNwbGF5TWVzc2FnZSBmcm9tIFwiLi4vTWVzc2FnZXNcIjtcbmltcG9ydCBQcm9qZWN0TG9jYWxTdG9yYWdlIGZyb20gXCIuL1Byb2plY3RMb2NhbFN0b3JhZ2VcIjtcblxuY29uc3QgcmVhZE9uZVByb2plY3QgPSAobmFtZSkgPT4ge1xuICBjb25zdCBwcm9qZWN0cyA9IFByb2plY3RMb2NhbFN0b3JhZ2UuZ2V0UHJvamVjdHMoKTtcbiAgY29uc3QgaW5kZXggPSBwcm9qZWN0cy5maW5kSW5kZXgoKHByb2plY3QpID0+IHByb2plY3QubmFtZSA9PT0gbmFtZSk7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICByZXR1cm4gcHJvamVjdHNbaW5kZXhdO1xuICB9XG4gIGRpc3BsYXlNZXNzYWdlKFwiVGhpcyBwcm9qZWN0IGRvZXMgbm90IGV4aXN0IVwiKTtcbiAgcmV0dXJuIC0xO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcmVhZE9uZVByb2plY3Q7XG4iLCJjbGFzcyBHbG9iYWxWYWx1ZXN7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy5hc2tVc2VyVGFzayA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5hc2tVc2VyRGVzYyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmFza1VzZXJOYW1lID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJvamVjdE5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucHJvamVjdERlc2MgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudGFza05hbWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldEFza1VzZXJUYXNrKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmFza1VzZXJUYXNrO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXRBc2tVc2VyVGFzayh0YXNrKXtcbiAgICAgICAgdGhpcy5hc2tVc2VyVGFzayA9IHRhc2s7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldEFza1VzZXJOYW1lKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmFza1VzZXJOYW1lO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXRBc2tVc2VyTmFtZSh2YWx1ZSl7XG4gICAgICAgIHRoaXMuYXNrVXNlck5hbWUgPSAhIXZhbHVlO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRBc2tVc2VyRGVzYygpe1xuICAgICAgICByZXR1cm4gdGhpcy5hc2tVc2VyRGVzYztcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0QXNrVXNlckRlc2ModmFsdWUpe1xuICAgICAgICB0aGlzLmFza1VzZXJEZXNjID0gISF2YWx1ZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0UHJvamVjdE5hbWUoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvamVjdE5hbWU7XG4gICAgfVxuXG4gICAgc3RhdGljIHNldFByb2plY3ROYW1lKHByb2plY3ROYW1lKXtcbiAgICAgICAgdGhpcy5wcm9qZWN0TmFtZSA9IHByb2plY3ROYW1lO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRQcm9qZWN0RGVzYygpe1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9qZWN0RGVzYztcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0UHJvamVjdERlc2MocHJvamVjdERlc2Mpe1xuICAgICAgICB0aGlzLnByb2plY3REZXNjID0gcHJvamVjdERlc2M7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFRhc2tOYW1lKCl7XG4gICAgICAgIHJldHVybiB0aGlzLnRhc2tOYW1lO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXRUYXNrTmFtZShuYW1lKXtcbiAgICAgICAgdGhpcy50YXNrTmFtZSA9IG5hbWU7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHbG9iYWxWYWx1ZXM7IiwiaW1wb3J0IFRhc2tMb2NhbFN0b3JhZ2UgZnJvbSBcIi4vVGFza0xvY2FsU3RvcmFnZVwiO1xuXG5jb25zdCBkaXNwbGF5U2luZ2xlVGFza0RPTSA9IChwcm9qZWN0LG5hbWUpID0+IHtcbiAgICBjb25zdCB0YXNrc0Rpc3BsYXlEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGFza3MtZGlzcGxheScpO1xuICAgIGNvbnN0IHNpbmdsZVRhc2tEaXNwbGF5RGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpbmdsZS10YXNrLWRpc3BsYXknKTtcbiAgICBpZighdGFza3NEaXNwbGF5RGl2LmNsYXNzTGlzdC5jb250YWlucyhcImhpZGRlblwiKSl7XG4gICAgICAgIHRhc2tzRGlzcGxheURpdi5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICAgIH1cbiAgICBpZihzaW5nbGVUYXNrRGlzcGxheURpdi5jbGFzc0xpc3QuY29udGFpbnMoXCJoaWRkZW5cIikpe1xuICAgICAgICBzaW5nbGVUYXNrRGlzcGxheURpdi5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xuICAgIH1cbiAgICBjb25zdCBzaW5nbGVUYXNrUHJvamVjdERpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaW5nbGUtdGFzay1wcm9qZWN0Jyk7XG4gICAgY29uc3Qgc2luZ2xlVGFza05hbWVEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2luZ2xlLXRhc2stbmFtZScpO1xuICAgIGNvbnN0IHNpbmdsZVRhc2tEZXNjRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpbmdsZS10YXNrLWRlc2MnKTtcbiAgICBjb25zdCBzaW5nbGVUYXNrRGF0ZURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaW5nbGUtdGFzay1kYXRlJyk7XG4gICAgY29uc3Qgc2luZ2xlVGFza0R1ZURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaW5nbGUtdGFzay1kdWUnKTtcbiAgICBjb25zdCBzaW5nbGVUYXNrUHJpb3JpdHlEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2luZ2xlLXRhc2stcHJpb3JpdHknKTtcbiAgICBjb25zdCBzaW5nbGVUYXNrTm90ZXNEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2luZ2xlLXRhc2stbm90ZXMnKTtcbiAgICBjb25zdCBzaW5nbGVUYXNrU3RhdHVzRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpbmdsZS10YXNrLXN0YXR1cycpO1xuXG4gICAgY29uc3QgdGFzayA9IFRhc2tMb2NhbFN0b3JhZ2UuZ2V0U2luZ2xlVGFzayhwcm9qZWN0LG5hbWUpO1xuICAgIHNpbmdsZVRhc2tQcm9qZWN0RGl2LnRleHRDb250ZW50ID0gdGFzay5wcm9qZWN0O1xuICAgIHNpbmdsZVRhc2tOYW1lRGl2LnRleHRDb250ZW50ID0gdGFzay5uYW1lO1xuICAgIHNpbmdsZVRhc2tEZXNjRGl2LnRleHRDb250ZW50ID0gdGFzay5kZXNjO1xuICAgIHNpbmdsZVRhc2tEdWVEaXYudGV4dENvbnRlbnQgPSB0YXNrLmR1ZTtcbiAgICBzaW5nbGVUYXNrRGF0ZURpdi50ZXh0Q29udGVudCA9IHRhc2suZGF0ZTtcbiAgICBzaW5nbGVUYXNrUHJpb3JpdHlEaXYudGV4dENvbnRlbnQgPSB0YXNrLnByaW9yaXR5O1xuICAgIHNpbmdsZVRhc2tOb3Rlc0Rpdi50ZXh0Q29udGVudCA9IHRhc2subm90ZXM7XG4gICAgc2luZ2xlVGFza1N0YXR1c0Rpdi50ZXh0Q29udGVudCA9IHRhc2suc3RhdHVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkaXNwbGF5U2luZ2xlVGFza0RPTTsiLCJpbXBvcnQgR2xvYmFsVmFsdWVzIGZyb20gXCIuL0dsb2JhbFZhbHVlc1wiO1xuaW1wb3J0IHVwZGF0ZVByb2plY3REZXNjIGZyb20gXCIuL1Byb2plY3RNb2R1bGVzL1Byb2plY3RVcGRhdGVQcm9qZWN0RGVzY1wiO1xuaW1wb3J0IHVwZGF0ZVByb2plY3ROYW1lIGZyb20gXCIuL1Byb2plY3RNb2R1bGVzL1Byb2plY3RVcGRhdGVQcm9qZWN0TmFtZVwiO1xuaW1wb3J0IHVwZGF0ZVRhc2tOYW1lIGZyb20gXCIuL1Rhc2tNb2R1bGVzL1Rhc2tVcGRhdGVUYXNrTmFtZVwiO1xuaW1wb3J0IHVwZGF0ZVRhc2tEZXNjIGZyb20gXCIuL1Rhc2tNb2R1bGVzL1Rhc2tVcGRhdGVUYXNrRGVzY1wiO1xuaW1wb3J0IHVwZGF0ZVRhc2tEdWUgZnJvbSBcIi4vVGFza01vZHVsZXMvVGFza1VwZGF0ZUR1ZVwiO1xuaW1wb3J0IHVwZGF0ZVRhc2tOb3RlcyBmcm9tIFwiLi9UYXNrTW9kdWxlcy9UYXNrVXBkYXRlTm90ZXNcIjtcbmltcG9ydCB1cGRhdGVUYXNrUHJpb3JpdHkgZnJvbSBcIi4vVGFza01vZHVsZXMvVGFza1VwZGF0ZVByaW9yaXR5XCI7XG5pbXBvcnQgdXBkYXRlVGFza1N0YXR1cyBmcm9tIFwiLi9UYXNrTW9kdWxlcy9UYXNrVXBkYXRlU3RhdHVzXCI7XG5cbmNvbnN0IGFza1VzZXJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFza1VzZXJCdXR0b25cIik7XG5jb25zdCBhc2tVc2VyRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hc2tVc2VyRGl2XCIpO1xuY29uc3QgYXNrVXNlclRleHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFza1VzZXJUZXh0XCIpO1xuY29uc3QgYXNrVXNlclRleHRBcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hc2tVc2VyVGV4dEFyZWFcIik7XG5cbmNvbnN0IGFza1VzZXIgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICBhc2tVc2VyVGV4dC50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG4gIGFza1VzZXJUZXh0QXJlYS52YWx1ZSA9IFwiXCI7XG4gIGFza1VzZXJEaXYuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbn07XG5cbmNvbnN0IHJlbW92ZUFza1VzZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGFza1VzZXJEaXYuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgaWYgKEdsb2JhbFZhbHVlcy5nZXRBc2tVc2VyVGFzaygpID09PSBcImNoYW5nZVByb2plY3REZXNjXCIpIHtcbiAgICB1cGRhdGVQcm9qZWN0RGVzYyhHbG9iYWxWYWx1ZXMuZ2V0UHJvamVjdE5hbWUoKSwgYXNrVXNlclRleHRBcmVhLnZhbHVlKTtcbiAgfSBlbHNlIGlmIChHbG9iYWxWYWx1ZXMuZ2V0QXNrVXNlclRhc2soKSA9PT0gXCJjaGFuZ2VQcm9qZWN0TmFtZVwiKSB7XG4gICAgdXBkYXRlUHJvamVjdE5hbWUoR2xvYmFsVmFsdWVzLmdldFByb2plY3ROYW1lKCksIGFza1VzZXJUZXh0QXJlYS52YWx1ZSk7XG4gIH0gZWxzZSBpZiAoR2xvYmFsVmFsdWVzLmdldEFza1VzZXJUYXNrKCkgPT09IFwiY2hhbmdlVGFza05hbWVcIikge1xuICAgIHVwZGF0ZVRhc2tOYW1lKFxuICAgICAgR2xvYmFsVmFsdWVzLmdldFByb2plY3ROYW1lKCksXG4gICAgICBHbG9iYWxWYWx1ZXMuZ2V0VGFza05hbWUoKSxcbiAgICAgIGFza1VzZXJUZXh0QXJlYS52YWx1ZVxuICAgICk7XG4gIH0gZWxzZSBpZiAoR2xvYmFsVmFsdWVzLmdldEFza1VzZXJUYXNrKCkgPT09IFwiY2hhbmdlVGFza0Rlc2NcIikge1xuICAgIHVwZGF0ZVRhc2tEZXNjKFxuICAgICAgR2xvYmFsVmFsdWVzLmdldFByb2plY3ROYW1lKCksXG4gICAgICBHbG9iYWxWYWx1ZXMuZ2V0VGFza05hbWUoKSxcbiAgICAgIGFza1VzZXJUZXh0QXJlYS52YWx1ZVxuICAgICk7XG4gIH0gZWxzZSBpZiAoR2xvYmFsVmFsdWVzLmdldEFza1VzZXJUYXNrKCkgPT09IFwiY2hhbmdlVGFza0R1ZVwiKSB7XG4gICAgdXBkYXRlVGFza0R1ZShcbiAgICAgIEdsb2JhbFZhbHVlcy5nZXRQcm9qZWN0TmFtZSgpLFxuICAgICAgR2xvYmFsVmFsdWVzLmdldFRhc2tOYW1lKCksXG4gICAgICBhc2tVc2VyVGV4dEFyZWEudmFsdWVcbiAgICApO1xuICB9IGVsc2UgaWYgKEdsb2JhbFZhbHVlcy5nZXRBc2tVc2VyVGFzaygpID09PSBcImNoYW5nZVRhc2tOb3Rlc1wiKSB7XG4gICAgdXBkYXRlVGFza05vdGVzKFxuICAgICAgR2xvYmFsVmFsdWVzLmdldFByb2plY3ROYW1lKCksXG4gICAgICBHbG9iYWxWYWx1ZXMuZ2V0VGFza05hbWUoKSxcbiAgICAgIGFza1VzZXJUZXh0QXJlYS52YWx1ZVxuICAgICk7XG4gIH0gZWxzZSBpZiAoR2xvYmFsVmFsdWVzLmdldEFza1VzZXJUYXNrKCkgPT09IFwiY2hhbmdlVGFza1ByaW9yaXR5XCIpIHtcbiAgICB1cGRhdGVUYXNrUHJpb3JpdHkoXG4gICAgICBHbG9iYWxWYWx1ZXMuZ2V0UHJvamVjdE5hbWUoKSxcbiAgICAgIEdsb2JhbFZhbHVlcy5nZXRUYXNrTmFtZSgpLFxuICAgICAgYXNrVXNlclRleHRBcmVhLnZhbHVlXG4gICAgKTtcbiAgfWVsc2UgaWYgKEdsb2JhbFZhbHVlcy5nZXRBc2tVc2VyVGFzaygpID09PSBcImNoYW5nZVRhc2tTdGF0dXNcIikge1xuICAgIHVwZGF0ZVRhc2tTdGF0dXMoXG4gICAgICBHbG9iYWxWYWx1ZXMuZ2V0UHJvamVjdE5hbWUoKSxcbiAgICAgIEdsb2JhbFZhbHVlcy5nZXRUYXNrTmFtZSgpLFxuICAgICAgYXNrVXNlclRleHRBcmVhLnZhbHVlXG4gICAgKTtcbiAgfVxuICBHbG9iYWxWYWx1ZXMuc2V0QXNrVXNlclRhc2sodW5kZWZpbmVkKTtcbiAgR2xvYmFsVmFsdWVzLnNldFByb2plY3ROYW1lKHVuZGVmaW5lZCk7XG4gIEdsb2JhbFZhbHVlcy5zZXRUYXNrTmFtZSh1bmRlZmluZWQpO1xufTtcblxuYXNrVXNlckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgcmVtb3ZlQXNrVXNlcik7XG5cbmV4cG9ydCBkZWZhdWx0IGFza1VzZXI7XG4iLCJpbXBvcnQgZGlzcGxheU1lc3NhZ2UgZnJvbSBcIi4uL01lc3NhZ2VzXCI7XG5pbXBvcnQgVmFsaWRhdGlvbnMgZnJvbSBcIi4uL1ZhbGlkYXRpb25zXCI7XG5pbXBvcnQgZGlzcGxheVNpbmdsZVByb2plY3QgZnJvbSBcIi4vUHJvamVjdERpc3BsYXlTaW5nbGVQcm9qZWN0RE9NXCI7XG5pbXBvcnQgUHJvamVjdExvY2FsU3RvcmFnZSBmcm9tIFwiLi9Qcm9qZWN0TG9jYWxTdG9yYWdlXCI7XG5cbmNvbnN0IHVwZGF0ZVByb2plY3REZXNjID0gKG5hbWUsIG5ld0Rlc2MpID0+IHtcbiAgY29uc3QgcHJvamVjdHMgPSBQcm9qZWN0TG9jYWxTdG9yYWdlLmdldFByb2plY3RzKCk7XG4gIGNvbnN0IGluZGV4ID0gcHJvamVjdHMuZmluZEluZGV4KChwcm9qZWN0KSA9PiBwcm9qZWN0Lm5hbWUgPT09IG5hbWUpO1xuICBpZiAoaW5kZXggIT09IC0xICYmIFZhbGlkYXRpb25zLnZhbGlkYXRlRGVzYyhuZXdEZXNjKSkge1xuICAgIHByb2plY3RzW2luZGV4XS5kZXNjID0gbmV3RGVzYztcbiAgfSBlbHNlIHtcbiAgICBkaXNwbGF5TWVzc2FnZShcbiAgICAgIGBQcm9qZWN0ICR7bmFtZX0gZG9lcyBub3QgZXhpc3RcXG4gb3IgZGVzYyA8MCBvciA+MTQwIGNoYXJhY3RlcnNgXG4gICAgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBQcm9qZWN0TG9jYWxTdG9yYWdlLnVwZGF0ZVByb2plY3QocHJvamVjdHMpO1xuICBkaXNwbGF5TWVzc2FnZShgIFByb2plY3QgJHtuYW1lfSBkZXNjIGlzIGNoYW5nZWQhYCk7XG4gIGRpc3BsYXlTaW5nbGVQcm9qZWN0KG5hbWUpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXBkYXRlUHJvamVjdERlc2M7XG4iLCJpbXBvcnQgZGlzcGxheU1lc3NhZ2UgZnJvbSBcIi4uL01lc3NhZ2VzXCI7XG5pbXBvcnQgZGlzcGxheVNpbmdsZVByb2plY3QgZnJvbSBcIi4vUHJvamVjdERpc3BsYXlTaW5nbGVQcm9qZWN0RE9NXCI7XG5pbXBvcnQgUHJvamVjdExvY2FsU3RvcmFnZSBmcm9tIFwiLi9Qcm9qZWN0TG9jYWxTdG9yYWdlXCI7XG5cbmNvbnN0IHVwZGF0ZVByb2plY3ROYW1lID0gKG5hbWUsIG5ld05hbWUpID0+IHtcbiAgY29uc3QgcHJvamVjdHMgPSBQcm9qZWN0TG9jYWxTdG9yYWdlLmdldFByb2plY3RzKCk7XG4gIGNvbnN0IGluZGV4ID0gcHJvamVjdHMuZmluZEluZGV4KChwcm9qZWN0KSA9PiBwcm9qZWN0Lm5hbWUgPT09IG5hbWUpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgcHJvamVjdHNbaW5kZXhdLm5hbWUgPSBuZXdOYW1lO1xuICB9IGVsc2Uge1xuICAgIGRpc3BsYXlNZXNzYWdlKGBQcm9qZWN0ICR7bmFtZX0gZG9lcyBub3QgZXhpc3RgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBQcm9qZWN0TG9jYWxTdG9yYWdlLnVwZGF0ZVByb2plY3QocHJvamVjdHMpO1xuICBkaXNwbGF5TWVzc2FnZShgUHJvamVjdCAke25hbWV9IGlzIGNoYW5nZWQgdG8gJHtuZXdOYW1lfSFgKTtcbiAgZGlzcGxheVNpbmdsZVByb2plY3QobmV3TmFtZSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1cGRhdGVQcm9qZWN0TmFtZTtcbiIsImltcG9ydCBkaXNwbGF5U2luZ2xlVGFza0RPTSBmcm9tICcuL1Rhc2tEaXNwbGF5U2luZ2xlVGFza0RPTSc7XG5pbXBvcnQgVGFza0xvY2FsU3RvcmFnZSBmcm9tICcuL1Rhc2tMb2NhbFN0b3JhZ2UnO1xuXG5jb25zdCB1cGRhdGVUYXNrTmFtZSA9IChwcm9qZWN0TmFtZSxvbGROYW1lLCBuZXdOYW1lKSA9PiB7XG4gICAgY29uc3QgdGFza3MgPSBUYXNrTG9jYWxTdG9yYWdlLmdldFRhc2socHJvamVjdE5hbWUpO1xuICAgIGNvbnN0IHRhc2sgPSB0YXNrcy5maW5kKHRhc2syID0+IHRhc2syLm5hbWUgPT09IG9sZE5hbWUpO1xuICAgIHRhc2submFtZSA9IG5ld05hbWU7XG4gICAgVGFza0xvY2FsU3RvcmFnZS51cGRhdGVUYXNrKHByb2plY3ROYW1lLHRhc2tzKTtcbiAgICBkaXNwbGF5U2luZ2xlVGFza0RPTShwcm9qZWN0TmFtZSxuZXdOYW1lKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXBkYXRlVGFza05hbWU7IiwiaW1wb3J0IGRpc3BsYXlNZXNzYWdlIGZyb20gJy4uL01lc3NhZ2VzJztcbmltcG9ydCBWYWxpZGF0aW9ucyBmcm9tICcuLi9WYWxpZGF0aW9ucyc7XG5pbXBvcnQgZGlzcGxheVNpbmdsZVRhc2tET00gZnJvbSAnLi9UYXNrRGlzcGxheVNpbmdsZVRhc2tET00nO1xuaW1wb3J0IFRhc2tMb2NhbFN0b3JhZ2UgZnJvbSAnLi9UYXNrTG9jYWxTdG9yYWdlJztcblxuY29uc3QgdXBkYXRlVGFza0Rlc2MgPSAocHJvamVjdE5hbWUsdGFza05hbWUsIGRlc2MpID0+IHtcbiAgIGlmKFZhbGlkYXRpb25zLnZhbGlkYXRlRGVzYyhkZXNjKSl7XG4gICAgY29uc3QgdGFza3MgPSBUYXNrTG9jYWxTdG9yYWdlLmdldFRhc2socHJvamVjdE5hbWUpO1xuICAgIGNvbnN0IHRhc2sgPSB0YXNrcy5maW5kKHRhc2syID0+IHRhc2syLm5hbWUgPT09IHRhc2tOYW1lKTtcbiAgICB0YXNrLmRlc2MgPSBkZXNjO1xuICAgIFRhc2tMb2NhbFN0b3JhZ2UudXBkYXRlVGFzayhwcm9qZWN0TmFtZSx0YXNrcyk7XG4gICAgZGlzcGxheVNpbmdsZVRhc2tET00ocHJvamVjdE5hbWUsdGFza05hbWUpO1xuICAgfWVsc2V7XG4gICAgZGlzcGxheU1lc3NhZ2UoJ0ludmFsaWQhJyk7XG4gICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVwZGF0ZVRhc2tEZXNjOyIsImltcG9ydCBkaXNwbGF5TWVzc2FnZSBmcm9tIFwiLi4vTWVzc2FnZXNcIjtcbmltcG9ydCBWYWxpZGF0aW9ucyBmcm9tIFwiLi4vVmFsaWRhdGlvbnNcIjtcbmltcG9ydCBkaXNwbGF5U2luZ2xlVGFza0RPTSBmcm9tIFwiLi9UYXNrRGlzcGxheVNpbmdsZVRhc2tET01cIjtcbmltcG9ydCBUYXNrTG9jYWxTdG9yYWdlIGZyb20gXCIuL1Rhc2tMb2NhbFN0b3JhZ2VcIjtcblxuY29uc3QgdXBkYXRlVGFza0R1ZSA9IChwcm9qZWN0TmFtZSwgdGFza05hbWUsIGR1ZSkgPT4ge1xuICBpZiAoVmFsaWRhdGlvbnMudmFsaWRhdGVEYXRlKGR1ZSkpIHtcbiAgICBjb25zdCB0YXNrcyA9IFRhc2tMb2NhbFN0b3JhZ2UuZ2V0VGFzayhwcm9qZWN0TmFtZSk7XG4gICAgY29uc3QgdGFzayA9IHRhc2tzLmZpbmQoKHRhc2syKSA9PiB0YXNrMi5uYW1lID09PSB0YXNrTmFtZSk7XG4gICAgdGFzay5kdWUgPSBkdWU7XG4gICAgVGFza0xvY2FsU3RvcmFnZS51cGRhdGVUYXNrKHByb2plY3ROYW1lLCB0YXNrcyk7XG4gICAgZGlzcGxheVNpbmdsZVRhc2tET00ocHJvamVjdE5hbWUsIHRhc2tOYW1lKTtcbiAgfWVsc2V7XG4gICAgZGlzcGxheU1lc3NhZ2UoJ0ludmFsaWQhJyk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVwZGF0ZVRhc2tEdWU7XG4iLCJpbXBvcnQgZGlzcGxheU1lc3NhZ2UgZnJvbSAnLi4vTWVzc2FnZXMnO1xuaW1wb3J0IFZhbGlkYXRpb25zIGZyb20gJy4uL1ZhbGlkYXRpb25zJztcbmltcG9ydCBkaXNwbGF5U2luZ2xlVGFza0RPTSBmcm9tICcuL1Rhc2tEaXNwbGF5U2luZ2xlVGFza0RPTSc7XG5pbXBvcnQgVGFza0xvY2FsU3RvcmFnZSBmcm9tICcuL1Rhc2tMb2NhbFN0b3JhZ2UnO1xuXG5jb25zdCB1cGRhdGVUYXNrTm90ZXMgPSAocHJvamVjdE5hbWUsdGFza05hbWUsIG5vdGVzKSA9PiB7XG4gICBpZihWYWxpZGF0aW9ucy52YWxpZGF0ZU5vdGVzKG5vdGVzKSl7XG4gICAgY29uc3QgdGFza3MgPSBUYXNrTG9jYWxTdG9yYWdlLmdldFRhc2socHJvamVjdE5hbWUpO1xuICAgIGNvbnN0IHRhc2sgPSB0YXNrcy5maW5kKHRhc2syID0+IHRhc2syLm5hbWUgPT09IHRhc2tOYW1lKTtcbiAgICB0YXNrLm5vdGVzID0gbm90ZXM7XG4gICAgVGFza0xvY2FsU3RvcmFnZS51cGRhdGVUYXNrKHByb2plY3ROYW1lLHRhc2tzKTtcbiAgICBkaXNwbGF5U2luZ2xlVGFza0RPTShwcm9qZWN0TmFtZSx0YXNrTmFtZSk7XG4gICB9ZWxzZXtcbiAgICBkaXNwbGF5TWVzc2FnZSgnSW52YWxpZCEnKTtcbiAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdXBkYXRlVGFza05vdGVzOyIsImltcG9ydCBkaXNwbGF5TWVzc2FnZSBmcm9tICcuLi9NZXNzYWdlcyc7XG5pbXBvcnQgVmFsaWRhdGlvbnMgZnJvbSAnLi4vVmFsaWRhdGlvbnMnO1xuaW1wb3J0IGRpc3BsYXlTaW5nbGVUYXNrRE9NIGZyb20gJy4vVGFza0Rpc3BsYXlTaW5nbGVUYXNrRE9NJztcbmltcG9ydCBUYXNrTG9jYWxTdG9yYWdlIGZyb20gJy4vVGFza0xvY2FsU3RvcmFnZSc7XG5cbmNvbnN0IHVwZGF0ZVRhc2tQcmlvcml0eSA9IChwcm9qZWN0TmFtZSx0YXNrTmFtZSwgcHJpb3JpdHkpID0+IHtcbiAgIGlmKFZhbGlkYXRpb25zLnZhbGlkYXRlTm90ZXMocHJpb3JpdHkpKXtcbiAgICBjb25zdCB0YXNrcyA9IFRhc2tMb2NhbFN0b3JhZ2UuZ2V0VGFzayhwcm9qZWN0TmFtZSk7XG4gICAgY29uc3QgdGFzayA9IHRhc2tzLmZpbmQodGFzazIgPT4gdGFzazIubmFtZSA9PT0gdGFza05hbWUpO1xuICAgIHRhc2sucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICBUYXNrTG9jYWxTdG9yYWdlLnVwZGF0ZVRhc2socHJvamVjdE5hbWUsdGFza3MpO1xuICAgIGRpc3BsYXlTaW5nbGVUYXNrRE9NKHByb2plY3ROYW1lLHRhc2tOYW1lKTtcbiAgIH1lbHNle1xuICAgIGRpc3BsYXlNZXNzYWdlKCdJbnZhbGlkIScpO1xuICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB1cGRhdGVUYXNrUHJpb3JpdHk7IiwiaW1wb3J0IGRpc3BsYXlNZXNzYWdlIGZyb20gJy4uL01lc3NhZ2VzJztcbmltcG9ydCBWYWxpZGF0aW9ucyBmcm9tICcuLi9WYWxpZGF0aW9ucyc7XG5pbXBvcnQgZGlzcGxheVNpbmdsZVRhc2tET00gZnJvbSAnLi9UYXNrRGlzcGxheVNpbmdsZVRhc2tET00nO1xuaW1wb3J0IFRhc2tMb2NhbFN0b3JhZ2UgZnJvbSAnLi9UYXNrTG9jYWxTdG9yYWdlJztcblxuY29uc3QgdXBkYXRlVGFza1N0YXR1cyA9IChwcm9qZWN0TmFtZSx0YXNrTmFtZSwgc3RhdHVzKSA9PiB7XG4gICBpZihWYWxpZGF0aW9ucy52YWxpZGF0ZU5vdGVzKHN0YXR1cykpe1xuICAgIGNvbnN0IHRhc2tzID0gVGFza0xvY2FsU3RvcmFnZS5nZXRUYXNrKHByb2plY3ROYW1lKTtcbiAgICBjb25zdCB0YXNrID0gdGFza3MuZmluZCh0YXNrMiA9PiB0YXNrMi5uYW1lID09PSB0YXNrTmFtZSk7XG4gICAgdGFzay5zdGF0dXMgPSBzdGF0dXM7XG4gICAgVGFza0xvY2FsU3RvcmFnZS51cGRhdGVUYXNrKHByb2plY3ROYW1lLHRhc2tzKTtcbiAgICBkaXNwbGF5U2luZ2xlVGFza0RPTShwcm9qZWN0TmFtZSx0YXNrTmFtZSk7XG4gICB9ZWxzZXtcbiAgICBkaXNwbGF5TWVzc2FnZSgnSW52YWxpZCEnKTtcbiAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdXBkYXRlVGFza1N0YXR1czsiLCJpbXBvcnQgVGFza0xvY2FsU3RvcmFnZSBmcm9tIFwiLi9UYXNrTG9jYWxTdG9yYWdlXCI7XG5cbmNvbnN0IGRpc3BsYXlBbGxUYXNrc0RPTSA9ICgpID0+IHtcbiAgY29uc3Qgc2luZ2xlVGFza0Rpc3BsYXlEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNpbmdsZS10YXNrLWRpc3BsYXlcIik7XG4gIGNvbnN0IHNpbmdsZVByb2plY3RUYXNrc0RpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2luZ2xlLXByb2plY3QtdGFza3NcIik7XG4gIGNvbnN0IHRhc2tzRGlzcGxheURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFza3MtZGlzcGxheVwiKTtcbiAgY29uc3Qgc2luZ2xlUHJvamVjdE5hbWVEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNpbmdsZS1wcm9qZWN0LW5hbWVcIik7XG4gIGNvbnN0IHByb2plY3ROYW1lID0gc2luZ2xlUHJvamVjdE5hbWVEaXYudGV4dENvbnRlbnQ7XG4gIGlmIChwcm9qZWN0TmFtZSkge1xuICAgIGlmICghc2luZ2xlVGFza0Rpc3BsYXlEaXYuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaGlkZGVuXCIpKSB7XG4gICAgICBzaW5nbGVUYXNrRGlzcGxheURpdi5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICAgIH1cbiAgICBpZiAoc2luZ2xlUHJvamVjdFRhc2tzRGl2LmNsYXNzTGlzdC5jb250YWlucyhcImhpZGRlblwiKSkge1xuICAgICAgc2luZ2xlUHJvamVjdFRhc2tzRGl2LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG4gICAgfVxuICAgIGlmICh0YXNrc0Rpc3BsYXlEaXYuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaGlkZGVuXCIpKSB7XG4gICAgICB0YXNrc0Rpc3BsYXlEaXYuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbiAgICB9XG4gICAgdGFza3NEaXNwbGF5RGl2LmlubmVySFRNTCA9IFwiXCI7XG4gICAgY29uc3QgdGFza3MgPSBUYXNrTG9jYWxTdG9yYWdlLmdldFRhc2socHJvamVjdE5hbWUpO1xuXG4gICAgY29uc3Qgc2luZ2xlVGFza0RpdlRlbXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHNpbmdsZVRhc2tEaXZUZW1wLmNsYXNzTGlzdC5hZGQoXCJ0YXNrXCIpO1xuICAgIHNpbmdsZVRhc2tEaXZUZW1wLmlubmVySFRNTCA9IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJkaXNwbGF5LXRhc2stbm8gc21hbGwtdGV4dCBoaWRkZW5cIj5UYXNrIE5vPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiZGlzcGxheS10YXNrLXByb2plY3Qgc21hbGwtdGV4dCBoaWRkZW5cIj5Qcm9qZWN0PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiZGlzcGxheS10YXNrLW5hbWUgc21hbGwtdGV4dFwiPk5hbWU8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJkaXNwbGF5LXRhc2stZGF0ZSBzbWFsbC10ZXh0XCI+Q3JlYXRlZCBvbjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImRpc3BsYXktdGFzay1kdWUgc21hbGwtdGV4dFwiPkR1ZSBkYXRlPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiZGlzcGxheS10YXNrLXByaW9yaXR5IHNtYWxsLXRleHRcIj5Qcmlvcml0eTwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImRpc3BsYXktdGFzay1ub3RlcyBzbWFsbC10ZXh0XCI+Tm90ZXM8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJkaXNwbGF5LXRhc2stc3RhdHVzIHNtYWxsLXRleHRcIj5TdGF0dXM8L2Rpdj5gO1xuICAgIHRhc2tzRGlzcGxheURpdi5hcHBlbmRDaGlsZChzaW5nbGVUYXNrRGl2VGVtcCk7XG5cbiAgICBsZXQgY291bnRlciA9IDA7XG5cbiAgICB0YXNrcy5mb3JFYWNoKCh0YXNrKSA9PiB7XG4gICAgICBjb3VudGVyICs9MTtcbiAgICAgIGNvbnN0IHNpbmdsZVRhc2tEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgc2luZ2xlVGFza0Rpdi5jbGFzc0xpc3QuYWRkKFwidGFza1wiKTtcbiAgICAgIHNpbmdsZVRhc2tEaXYuaW5uZXJIVE1MID0gYFxuICAgICAgPGRpdiBjbGFzcz1cImRpc3BsYXktdGFzay1ubyBzbWFsbC10ZXh0IGhpZGRlblwiPiR7Y291bnRlcn08L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJkaXNwbGF5LXRhc2stcHJvamVjdCBzbWFsbC10ZXh0IGhpZGRlblwiPiR7dGFzay5wcm9qZWN0fTwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImRpc3BsYXktdGFzay1uYW1lIHNtYWxsLXRleHRcIj4ke3Rhc2submFtZX08L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJkaXNwbGF5LXRhc2stZGF0ZSBzbWFsbC10ZXh0XCI+JHt0YXNrLmRhdGV9PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiZGlzcGxheS10YXNrLWR1ZSBzbWFsbC10ZXh0XCI+JHt0YXNrLmR1ZX08L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJkaXNwbGF5LXRhc2stcHJpb3JpdHkgc21hbGwtdGV4dFwiPiR7dGFzay5wcmlvcml0eX08L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJkaXNwbGF5LXRhc2stbm90ZXMgc21hbGwtdGV4dFwiPiR7dGFzay5ub3Rlc308L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJkaXNwbGF5LXRhc2stc3RhdHVzIHNtYWxsLXRleHRcIj4ke3Rhc2suc3RhdHVzfTwvZGl2PmA7XG4gICAgICB0YXNrc0Rpc3BsYXlEaXYuYXBwZW5kQ2hpbGQoc2luZ2xlVGFza0Rpdik7XG4gICAgfSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGRpc3BsYXlBbGxUYXNrc0RPTTtcbiIsImltcG9ydCBkaXNwbGF5TWVzc2FnZSBmcm9tIFwiLi4vTWVzc2FnZXNcIjtcbmltcG9ydCBWYWxpZGF0aW9ucyBmcm9tIFwiLi4vVmFsaWRhdGlvbnNcIjtcbmltcG9ydCBUYXNrIGZyb20gXCIuL1Rhc2tDbGFzc1wiO1xuaW1wb3J0IGRpc3BsYXlBbGxUYXNrc0RPTSBmcm9tIFwiLi9UYXNrRGlzcGxheURPTVwiO1xuaW1wb3J0IFRhc2tMb2NhbFN0b3JhZ2UgZnJvbSBcIi4vVGFza0xvY2FsU3RvcmFnZVwiO1xuXG5jb25zdCBhZGRUYXNrID0gKHByb2plY3QsIG5hbWUsIGRlc2MsIGR1ZSwgcHJpb3JpdHksIG5vdGVzKSA9PiB7XG4gICAgaWYoVmFsaWRhdGlvbnMudmFsaWRhdGVEYXRlKGR1ZSlcbiAgICAgJiYgVmFsaWRhdGlvbnMudmFsaWRhdGVOYW1lKG5hbWUpXG4gICAgICYmIFZhbGlkYXRpb25zLnZhbGlkYXRlRGVzYyhkZXNjKVxuICAgICAmJiBWYWxpZGF0aW9ucy52YWxpZGF0ZVByb2plY3QocHJvamVjdClcbiAgICAgJiYgVmFsaWRhdGlvbnMudmFsaWRhdGVOb3Rlcyhub3RlcylcbiAgICAgJiYgIVZhbGlkYXRpb25zLnZhbGlkYXRlVGFzayhwcm9qZWN0LG5hbWUpKXtcbiAgICAgICAgY29uc3QgdGFzayA9IG5ldyBUYXNrKHByb2plY3QsIG5hbWUsIGRlc2MsIGR1ZSwgcHJpb3JpdHksIG5vdGVzKTtcbiAgICAgICAgY29uc3QgdGFza3MgPSBUYXNrTG9jYWxTdG9yYWdlLmdldFRhc2socHJvamVjdCk7XG4gICAgICAgIHRhc2tzLnB1c2godGFzayk7XG4gICAgICAgIFRhc2tMb2NhbFN0b3JhZ2UudXBkYXRlVGFzayhwcm9qZWN0LCB0YXNrcyk7XG4gICAgICAgIGRpc3BsYXlBbGxUYXNrc0RPTSgpO1xuICAgICAgICBkaXNwbGF5TWVzc2FnZShgVGFzayAke25hbWV9IGlzIGNyZWF0ZWQhYCk7XG4gICAgfWVsc2V7XG4gICAgICAgIGRpc3BsYXlNZXNzYWdlKCdEZXRhaWxzIG5vdCB2YWxpZCEnKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFkZFRhc2s7IiwiY2xhc3MgVGFzayB7XG4gIGNvbnN0cnVjdG9yKHByb2plY3QsIG5hbWUsIGRlc2MsIGR1ZSwgcHJpb3JpdHksIG5vdGVzKSB7XG4gICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgdGhpcy5kYXRlID0gYCR7dG9kYXkuZ2V0RnVsbFllYXIoKX0tJHt0b2RheS5nZXRNb250aCgpKzF9LSR7dG9kYXkuZ2V0RGF0ZSgpfWA7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmRlc2MgPSBkZXNjO1xuICAgIHRoaXMuZHVlID0gZHVlO1xuICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICB0aGlzLm5vdGVzID0gbm90ZXM7XG4gICAgdGhpcy5zdGF0dXMgPSBcIm5vdCBkb25lXCI7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBUYXNrO1xuIiwiaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcbmltcG9ydCBkaXNwbGF5TWVzc2FnZSBmcm9tIFwiLi9tb2R1bGVzL01lc3NhZ2VzXCI7XG5pbXBvcnQgUHJvamVjdCBmcm9tIFwiLi9tb2R1bGVzL1Byb2plY3RNb2R1bGVzL1Byb2plY3RDbGFzc1wiO1xuaW1wb3J0IGNyZWF0ZVByb2plY3QgZnJvbSBcIi4vbW9kdWxlcy9Qcm9qZWN0TW9kdWxlcy9Qcm9qZWN0Rm9ybUhhbmRsaW5nXCI7XG5pbXBvcnQgYWRkUHJvamVjdCBmcm9tIFwiLi9tb2R1bGVzL1Byb2plY3RNb2R1bGVzL1Byb2plY3RBZGRQcm9qZWN0XCI7XG5pbXBvcnQgcmVtb3ZlUHJvamVjdCBmcm9tIFwiLi9tb2R1bGVzL1Byb2plY3RNb2R1bGVzL1Byb2plY3RSZW1vdmVQcm9qZWN0XCI7XG5pbXBvcnQgdXBkYXRlUHJvamVjdE5hbWUgZnJvbSBcIi4vbW9kdWxlcy9Qcm9qZWN0TW9kdWxlcy9Qcm9qZWN0VXBkYXRlUHJvamVjdE5hbWVcIjtcbmltcG9ydCB1cGRhdGVQcm9qZWN0RGVzYyBmcm9tIFwiLi9tb2R1bGVzL1Byb2plY3RNb2R1bGVzL1Byb2plY3RVcGRhdGVQcm9qZWN0RGVzY1wiO1xuaW1wb3J0IFByb2plY3RMb2NhbFN0b3JhZ2UgZnJvbSBcIi4vbW9kdWxlcy9Qcm9qZWN0TW9kdWxlcy9Qcm9qZWN0TG9jYWxTdG9yYWdlXCI7XG5pbXBvcnQgcmVhZE9uZVByb2plY3QgZnJvbSBcIi4vbW9kdWxlcy9Qcm9qZWN0TW9kdWxlcy9Qcm9qZWN0UmVhZE9uZVByb2plY3RcIjtcbmltcG9ydCBkaXNwbGF5UHJvamVjdHNPbkRvbSBmcm9tIFwiLi9tb2R1bGVzL1Byb2plY3RNb2R1bGVzL1Byb2plY3REaXNwbGF5RE9NXCI7XG5pbXBvcnQgZGlzcGxheVNpbmdsZVByb2plY3QgZnJvbSBcIi4vbW9kdWxlcy9Qcm9qZWN0TW9kdWxlcy9Qcm9qZWN0RGlzcGxheVNpbmdsZVByb2plY3RET01cIjtcbmltcG9ydCBhc2tVc2VyIGZyb20gXCIuL21vZHVsZXMvQXNrVXNlclwiO1xuaW1wb3J0IEdsb2JhbFZhbHVlcyBmcm9tIFwiLi9tb2R1bGVzL0dsb2JhbFZhbHVlc1wiO1xuXG4vKiBpbXBvcnRzIGZvciB0YXNrcyAqL1xuaW1wb3J0IGFkZFRhc2sgZnJvbSBcIi4vbW9kdWxlcy9UYXNrTW9kdWxlcy9UYXNrQWRkVGFza1wiO1xuaW1wb3J0IGRpc3BsYXlBbGxUYXNrc0RPTSBmcm9tIFwiLi9tb2R1bGVzL1Rhc2tNb2R1bGVzL1Rhc2tEaXNwbGF5RE9NXCI7XG5pbXBvcnQgZGlzcGxheVNpbmdsZVRhc2tET00gZnJvbSBcIi4vbW9kdWxlcy9UYXNrTW9kdWxlcy9UYXNrRGlzcGxheVNpbmdsZVRhc2tET01cIjtcbi8qIGVuZCBvZiBpbXBvcnRzIGZvciB0YXNrcyAqL1xuXG4vKiBTdGFydCBvZiBQcm9qZWN0IEphdmFTY3JpcHQgKi9cbmxvY2FsU3RvcmFnZS5jbGVhcigpO1xuYWRkUHJvamVjdChcIkRlZmF1bHQgUHJvamVjdFwiLCBcIlRoaXMgaXMgdGhlIGRlZmF1bHQgcHJvamVjdFwiKTtcbmFkZFByb2plY3QoXCJGaXJzdCBQcm9qZWN0XCIsIFwiVGhpcyBpcyB0aGUgZmlyc3QgcHJvamVjdFwiKTtcbmFkZFByb2plY3QoXCJUaGlyZCBQcm9qZWN0XCIsIFwiVGhpcyBpcyB0aGUgdGhpcmQgcHJvamVjdFwiKTtcbmFkZFByb2plY3QoXCJGb3VydGggUHJvamVjdFwiLCBcIlRoaXMgaXMgdGhlIGZvdXJ0aCBwcm9qZWN0XCIpO1xuYWRkUHJvamVjdChcIkZpZnRoIFByb2plY3RcIiwgXCJUaGlzIGlzIHRoZSBmaWZ0aCBwcm9qZWN0XCIpO1xuXG5jb25zdCBwcm9qZWN0RGlzcGxheURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvamVjdC1kaXNwbGF5XCIpO1xuY29uc3QgbXlQcm9qZWN0c0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubXktcHJvamVjdHNcIik7XG5jb25zdCBzaW5nbGVQcm9qZWN0RGlzcGxheURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gIFwiLnNpbmdsZS1wcm9qZWN0LWRpc3BsYXlcIlxuKTtcbmNvbnN0IHNpbmdsZVByb2plY3RUYXNrc0RpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2luZ2xlLXByb2plY3QtdGFza3NcIik7XG5jb25zdCBzaW5nbGVQcm9qZWN0UmVuYW1lQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgXCIuc2luZ2xlLXByb2plY3QtcmVuYW1lXCJcbik7XG5jb25zdCBzaW5nbGVQcm9qZWN0UmVkZXNjQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgXCIuc2luZ2xlLXByb2plY3QtcmVkZXNjXCJcbik7XG5jb25zdCBzaW5nbGVQcm9qZWN0UmVtb3ZlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgXCIuc2luZ2xlLXByb2plY3QtcmVtb3ZlXCJcbik7XG5cbmNvbnN0IGRpc3BsYXlTaW5nbGVQcm9qZWN0SGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBjb25zdCBwcm9qZWN0ID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoXCIucHJvamVjdFwiKTtcbiAgaWYgKHByb2plY3QpIHtcbiAgICBpZiAoIXByb2plY3REaXNwbGF5RGl2LmNsYXNzTGlzdC5jb250YWlucyhcImhpZGRlblwiKSkge1xuICAgICAgcHJvamVjdERpc3BsYXlEaXYuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgICB9XG4gICAgaWYgKHNpbmdsZVByb2plY3RUYXNrc0Rpdi5jbGFzc0xpc3QuY29udGFpbnMoXCJoaWRkZW5cIikpIHtcbiAgICAgIHNpbmdsZVByb2plY3RUYXNrc0Rpdi5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xuICAgIH1cbiAgICBkaXNwbGF5U2luZ2xlUHJvamVjdChwcm9qZWN0LnF1ZXJ5U2VsZWN0b3IoXCIucHJvamVjdC1uYW1lXCIpLnRleHRDb250ZW50KTtcbiAgICBkaXNwbGF5QWxsVGFza3NET00oKTtcbiAgfVxufTtcblxuY29uc3QgZGlzcGxheUFsbFByb2plY3RzSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgZGlzcGxheVByb2plY3RzT25Eb20oKTtcbn07XG5cbmNvbnN0IHJlbmFtZVByb2plY3RIYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGNvbnN0IHByb2plY3QgPSBldmVudC50YXJnZXQuY2xvc2VzdChcIi5zaW5nbGUtcHJvamVjdC1kZXRhaWxzXCIpO1xuICBjb25zdCBwcm9qZWN0TmFtZURpdiA9IHByb2plY3QucXVlcnlTZWxlY3RvcihcIi5zaW5nbGUtcHJvamVjdC1uYW1lXCIpO1xuICBjb25zdCBwcm9qZWN0TmFtZSA9IHByb2plY3ROYW1lRGl2LnRleHRDb250ZW50O1xuICBHbG9iYWxWYWx1ZXMuc2V0UHJvamVjdE5hbWUocHJvamVjdE5hbWUpO1xuICBHbG9iYWxWYWx1ZXMuc2V0QXNrVXNlclRhc2soXCJjaGFuZ2VQcm9qZWN0TmFtZVwiKTtcbiAgYXNrVXNlcihcImVudGVyIG5ldyBuYW1lXCIpO1xufTtcblxuY29uc3QgcmVkZXNjUHJvamVjdEhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgY29uc3QgcHJvamVjdCA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KFwiLnNpbmdsZS1wcm9qZWN0LWRldGFpbHNcIik7XG4gIGNvbnN0IHByb2plY3ROYW1lRGl2ID0gcHJvamVjdC5xdWVyeVNlbGVjdG9yKFwiLnNpbmdsZS1wcm9qZWN0LW5hbWVcIik7XG4gIGNvbnN0IHByb2plY3ROYW1lID0gcHJvamVjdE5hbWVEaXYudGV4dENvbnRlbnQ7XG4gIEdsb2JhbFZhbHVlcy5zZXRQcm9qZWN0TmFtZShwcm9qZWN0TmFtZSk7XG4gIEdsb2JhbFZhbHVlcy5zZXRBc2tVc2VyVGFzayhcImNoYW5nZVByb2plY3REZXNjXCIpO1xuICBhc2tVc2VyKFwiZW50ZXIgbmV3IGRlc2NcIik7XG59O1xuXG5jb25zdCByZW1vdmVQcm9qZWN0SGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBjb25zdCBwcm9qZWN0ID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoXCIuc2luZ2xlLXByb2plY3QtZGV0YWlsc1wiKTtcbiAgY29uc3QgcHJvamVjdE5hbWVEaXYgPSBwcm9qZWN0LnF1ZXJ5U2VsZWN0b3IoXCIuc2luZ2xlLXByb2plY3QtbmFtZVwiKTtcbiAgY29uc3QgcHJvamVjdE5hbWUgPSBwcm9qZWN0TmFtZURpdi50ZXh0Q29udGVudDtcbiAgcmVtb3ZlUHJvamVjdChwcm9qZWN0TmFtZSk7XG59O1xuXG5wcm9qZWN0RGlzcGxheURpdi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZGlzcGxheVNpbmdsZVByb2plY3RIYW5kbGVyKTtcbm15UHJvamVjdHNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGRpc3BsYXlBbGxQcm9qZWN0c0hhbmRsZXIpO1xuc2luZ2xlUHJvamVjdFJlbmFtZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgcmVuYW1lUHJvamVjdEhhbmRsZXIpO1xuc2luZ2xlUHJvamVjdFJlZGVzY0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgcmVkZXNjUHJvamVjdEhhbmRsZXIpO1xuc2luZ2xlUHJvamVjdFJlbW92ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgcmVtb3ZlUHJvamVjdEhhbmRsZXIpO1xuXG4vKiBFbmQgb2YgUHJvamVjdCBKYXZhU2NyaXB0ICovXG4vKiBTdGFydCBvZiB0YXNrcyBqYXZhc2NyaXB0ICovXG5hZGRUYXNrKFxuICBcIkRlZmF1bHQgUHJvamVjdFwiLFxuICBcIlRhc2sgMVwiLFxuICBcIkRlc2MgMVwiLFxuICBcIjIwMjMtMDItMjBcIixcbiAgXCJsb3dcIixcbiAgXCJub3RlcyBvbiB0YXNrXCJcbik7XG5hZGRUYXNrKFxuICBcIkRlZmF1bHQgUHJvamVjdFwiLFxuICBcIlRhc2sgMlwiLFxuICBcIkRlc2MgMlwiLFxuICBcIjIwMjMtMi0yMVwiLFxuICBcIm5vcm1hbFwiLFxuICBcIm5vdGVzIG9uIHRhc2tcIlxuKTtcbmFkZFRhc2soXG4gIFwiRGVmYXVsdCBQcm9qZWN0XCIsXG4gIFwiVGFzayAzXCIsXG4gIFwiRGVzYyAzXCIsXG4gIFwiMjAyMy0yLTIyXCIsXG4gIFwiaGlnaFwiLFxuICBcIm5vdGVzIG9uIHRhc2tcIlxuKTtcblxuY29uc3QgYWRkVGFza0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLXRhc2tcIik7XG5jb25zdCBjcmVhdGVUYXNrQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jcmVhdGUtdGFzay1idXR0b25cIik7XG5jb25zdCBteVRhc2tzQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5teS10YXNrc1wiKTtcbmNvbnN0IHRhc2tzRGlzcGxheURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFza3MtZGlzcGxheVwiKTtcbmNvbnN0IHNpbmdsZVRhc2tEaXNwbGF5RGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zaW5nbGUtdGFzay1kaXNwbGF5XCIpO1xuY29uc3Qgc2luZ2xlVGFza1JlbmFtZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2luZ2xlLXRhc2stcmVuYW1lXCIpO1xuY29uc3Qgc2luZ2xlVGFza1JlZGVzY0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2luZ2xlLXRhc2stcmVkZXNjXCIpO1xuY29uc3Qgc2luZ2xlVGFza1Jlbm90ZXNCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNpbmdsZS10YXNrLXJlbm90ZXNcIik7XG5jb25zdCBzaW5nbGVUYXNrUmVkdWVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNpbmdsZS10YXNrLXJlZHVlXCIpO1xuY29uc3Qgc2luZ2xlVGFza1JlcHJpb3JpdHlCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICBcIi5zaW5nbGUtdGFzay1yZXByaW9yaXR5XCJcbik7XG5jb25zdCBzaW5nbGVUYXNrUmVzdGF0dXNCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICBcIi5zaW5nbGUtdGFzay1yZXN0YXR1c1wiXG4pO1xuXG5jb25zdCBhZGRUYXNrSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYWRkVGFza0Zvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZC10YXNrLWZvcm1cIik7XG4gIGlmIChhZGRUYXNrRm9ybS5jbGFzc0xpc3QuY29udGFpbnMoXCJoaWRkZW5cIikpIHtcbiAgICBhZGRUYXNrRm9ybS5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xuICB9XG59O1xuXG5jb25zdCBjcmVhdGVUYXNrSGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBjb25zdCBzaW5nbGVQcm9qZWN0TmFtZURpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2luZ2xlLXByb2plY3QtbmFtZVwiKTtcbiAgY29uc3QgcHJvamVjdE5hbWUgPSBzaW5nbGVQcm9qZWN0TmFtZURpdi50ZXh0Q29udGVudDtcblxuICBjb25zdCBmb3JtID0gZG9jdW1lbnQuZm9ybXMuYWRkVGFza0Zvcm07XG4gIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm0pO1xuICBhZGRUYXNrKFxuICAgIHByb2plY3ROYW1lLFxuICAgIGZvcm1EYXRhLmdldChcInRhc2tOYW1lXCIpLFxuICAgIGZvcm1EYXRhLmdldChcInRhc2tEZXNjXCIpLFxuICAgIGZvcm1EYXRhLmdldChcInRhc2tEdWVcIiksXG4gICAgZm9ybURhdGEuZ2V0KFwidGFza1ByaW9yaXR5XCIpLFxuICAgIGZvcm1EYXRhLmdldChcInRhc2tOb3Rlc1wiKVxuICApO1xuICBmb3JtLnJlc2V0KCk7XG4gIGNvbnN0IGFkZFRhc2tGb3JtRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGQtdGFzay1mb3JtXCIpO1xuICBpZiAoIWFkZFRhc2tGb3JtRGl2LmNsYXNzTGlzdC5jb250YWlucyhcImhpZGRlblwiKSkge1xuICAgIGFkZFRhc2tGb3JtRGl2LmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG4gIH1cbn07XG5cbmNvbnN0IGRpc3BsYXlBbGxUYXNrc0hhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGRpc3BsYXlBbGxUYXNrc0RPTSgpO1xufTtcblxuY29uc3QgdGFza3NEaXNwbGF5SGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBjb25zdCB0YXNrID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoXCIudGFza1wiKTtcbiAgaWYgKHRhc2spIHtcbiAgICBkaXNwbGF5U2luZ2xlVGFza0RPTShcbiAgICAgIHRhc2sucXVlcnlTZWxlY3RvcihcIi5kaXNwbGF5LXRhc2stcHJvamVjdFwiKS50ZXh0Q29udGVudCxcbiAgICAgIHRhc2sucXVlcnlTZWxlY3RvcihcIi5kaXNwbGF5LXRhc2stbmFtZVwiKS50ZXh0Q29udGVudFxuICAgICk7XG4gIH1cbn07XG5cbmNvbnN0IGNvbW1vblRhc2tIYW5kbGVyID0gZnVuY3Rpb24oKXtcbiAgY29uc3Qgc2luZ2xlVGFza1Byb2plY3REaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNpbmdsZS10YXNrLXByb2plY3RcIik7XG4gIGNvbnN0IHNpbmdsZVRhc2tOYW1lRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zaW5nbGUtdGFzay1uYW1lXCIpO1xuICBHbG9iYWxWYWx1ZXMuc2V0VGFza05hbWUoc2luZ2xlVGFza05hbWVEaXYudGV4dENvbnRlbnQpO1xuICBHbG9iYWxWYWx1ZXMuc2V0UHJvamVjdE5hbWUoc2luZ2xlVGFza1Byb2plY3REaXYudGV4dENvbnRlbnQpO1xufVxuXG5jb25zdCB0YXNrUmVuYW1lSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgY29tbW9uVGFza0hhbmRsZXIoKTtcbiAgR2xvYmFsVmFsdWVzLnNldEFza1VzZXJUYXNrKFwiY2hhbmdlVGFza05hbWVcIik7XG4gIGFza1VzZXIoXCJlbnRlciBuZXcgdGFzayBuYW1lXCIpO1xufTtcblxuY29uc3QgdGFza1JlZGVzY0hhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGNvbW1vblRhc2tIYW5kbGVyKCk7XG4gIEdsb2JhbFZhbHVlcy5zZXRBc2tVc2VyVGFzayhcImNoYW5nZVRhc2tEZXNjXCIpO1xuICBhc2tVc2VyKFwiZW50ZXIgbmV3IHRhc2sgZGVzY1wiKTtcbn07XG5cbmNvbnN0IHRhc2tSZWR1ZUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGNvbW1vblRhc2tIYW5kbGVyKCk7XG4gIEdsb2JhbFZhbHVlcy5zZXRBc2tVc2VyVGFzayhcImNoYW5nZVRhc2tEdWVcIik7XG4gIGFza1VzZXIoXCJlbnRlciBuZXcgdGFzayBkdWVcIik7XG59O1xuXG5jb25zdCB0YXNrUmVub3Rlc0hhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGNvbW1vblRhc2tIYW5kbGVyKCk7XG4gIEdsb2JhbFZhbHVlcy5zZXRBc2tVc2VyVGFzayhcImNoYW5nZVRhc2tOb3Rlc1wiKTtcbiAgYXNrVXNlcihcImVudGVyIG5ldyB0YXNrIG5vdGVzXCIpO1xufTtcblxuY29uc3QgdGFza1JlcHJpb3JpdHlIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICBjb21tb25UYXNrSGFuZGxlcigpO1xuICBHbG9iYWxWYWx1ZXMuc2V0QXNrVXNlclRhc2soXCJjaGFuZ2VUYXNrUHJpb3JpdHlcIik7XG4gIGFza1VzZXIoXCJlbnRlciBuZXcgdGFzayBwcmlvcml0eVwiKTtcbn07XG5cbmNvbnN0IHRhc2tSZXN0YXR1c0hhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGNvbW1vblRhc2tIYW5kbGVyKCk7XG4gIEdsb2JhbFZhbHVlcy5zZXRBc2tVc2VyVGFzayhcImNoYW5nZVRhc2tTdGF0dXNcIik7XG4gIGFza1VzZXIoXCJlbnRlciBuZXcgdGFzayBzdGF0dXNcIik7XG59O1xuXG5hZGRUYXNrQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhZGRUYXNrSGFuZGxlcik7XG5jcmVhdGVUYXNrQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjcmVhdGVUYXNrSGFuZGxlcik7XG5teVRhc2tzQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBkaXNwbGF5QWxsVGFza3NIYW5kbGVyKTtcbnRhc2tzRGlzcGxheURpdi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGFza3NEaXNwbGF5SGFuZGxlcik7XG5zaW5nbGVUYXNrUmVuYW1lQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0YXNrUmVuYW1lSGFuZGxlcik7XG5zaW5nbGVUYXNrUmVkZXNjQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0YXNrUmVkZXNjSGFuZGxlcik7XG5zaW5nbGVUYXNrUmVkdWVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRhc2tSZWR1ZUhhbmRsZXIpO1xuc2luZ2xlVGFza1Jlbm90ZXNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRhc2tSZW5vdGVzSGFuZGxlcik7XG5zaW5nbGVUYXNrUmVwcmlvcml0eUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGFza1JlcHJpb3JpdHlIYW5kbGVyKTtcbnNpbmdsZVRhc2tSZXN0YXR1c0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGFza1Jlc3RhdHVzSGFuZGxlcik7XG4vKiBFbmQgb2YgdGFza3MgamF2YXNjcmlwdCAqL1xuIiwiaW1wb3J0IGRpc3BsYXlNZXNzYWdlIGZyb20gXCIuLi9NZXNzYWdlc1wiO1xuaW1wb3J0IFRhc2tMb2NhbFN0b3JhZ2UgZnJvbSBcIi4uL1Rhc2tNb2R1bGVzL1Rhc2tMb2NhbFN0b3JhZ2VcIjtcbmltcG9ydCBkaXNwbGF5UHJvamVjdHNPbkRvbSBmcm9tIFwiLi9Qcm9qZWN0RGlzcGxheURPTVwiO1xuaW1wb3J0IFByb2plY3RMb2NhbFN0b3JhZ2UgZnJvbSBcIi4vUHJvamVjdExvY2FsU3RvcmFnZVwiO1xuXG5jb25zdCByZW1vdmVQcm9qZWN0ID0gKG5hbWUpID0+IHtcbiAgY29uc3QgcHJvamVjdHMgPSBQcm9qZWN0TG9jYWxTdG9yYWdlLmdldFByb2plY3RzKCk7XG4gIGNvbnN0IGluZGV4ID0gcHJvamVjdHMuZmluZEluZGV4KChwcm9qZWN0KSA9PiBwcm9qZWN0Lm5hbWUgPT09IG5hbWUpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgcHJvamVjdHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICBUYXNrTG9jYWxTdG9yYWdlLnJlbW92ZVByb2plY3QobmFtZSk7XG4gICAgUHJvamVjdExvY2FsU3RvcmFnZS51cGRhdGVQcm9qZWN0KHByb2plY3RzKTtcbiAgICBkaXNwbGF5TWVzc2FnZShgUHJvamVjdCAke25hbWV9IGlzIHJlbW92ZWQhYCk7XG4gICAgZGlzcGxheVByb2plY3RzT25Eb20oKTtcbiAgfSBlbHNlIHtcbiAgICBkaXNwbGF5TWVzc2FnZShgUHJvamVjdCAke25hbWV9IGRvZXMgbm90IGV4aXN0YCk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJlbW92ZVByb2plY3Q7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm5jIiwib2tCdXR0b24iLCJva0J1dHRvbkRpdiIsIm9rQnV0dG9uVGV4dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGFzc0xpc3QiLCJhZGQiLCJtZXNzYWdlIiwidGV4dENvbnRlbnQiLCJzdGF0aWMiLCJwcm9qZWN0cyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJwYXJzZSIsInJlbW92ZUl0ZW0iLCJzZXRJdGVtIiwic2luZ2xlUHJvamVjdERpc3BsYXlEaXYiLCJzaW5nbGVQcm9qZWN0VGFza3NEaXYiLCJzaW5nbGVUYXNrRGlzcGxheURpdiIsImNvbnRhaW5zIiwicHJvamVjdERpc3BsYXlEaXYiLCJpbm5lckhUTUwiLCJwcm9qZWN0RGl2VGVtcCIsImNvdW50ZXIiLCJmb3JFYWNoIiwicHJvamVjdCIsInByb2plY3REaXYiLCJuYW1lIiwiZGVzYyIsImRhdGUiLCJyZXF1aXJlZEFyZ3MiLCJyZXF1aXJlZCIsImFyZ3MiLCJUeXBlRXJyb3IiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInRhc2tzIiwiZ2V0VGFzayIsImZpbmQiLCJ0YXNrIiwiYXJyIiwic3BsaXQiLCJkaXJ0eURhdGUiLCJhcmd1bWVudHMiLCJ2YWx1ZSIsIkRhdGUiLCJpc0RhdGUiLCJhcmd1bWVudCIsImFyZ1N0ciIsImdldFRpbWUiLCJjb25zb2xlIiwid2FybiIsInN0YWNrIiwiTmFOIiwidG9EYXRlIiwiaXNOYU4iLCJOdW1iZXIiLCJpc1ZhbGlkIiwibWF0Y2giLCJmaW5kSW5kZXgiLCJub3RlcyIsInRvZGF5IiwiZ2V0RGF0ZSIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJjcmVhdGVQcm9qZWN0QnV0dG9uIiwiYWRkUHJvamVjdEZvcm1EaXYiLCJhZGRQcm9qZWN0RGl2IiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImZvcm0iLCJmb3JtcyIsImFkZFByb2plY3RGb3JtIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsInJlc2V0IiwiYXNrVXNlclRhc2siLCJhc2tVc2VyRGVzYyIsImFza1VzZXJOYW1lIiwicHJvamVjdE5hbWUiLCJwcm9qZWN0RGVzYyIsInRhc2tOYW1lIiwidGFza3NEaXNwbGF5RGl2Iiwic2luZ2xlVGFza1Byb2plY3REaXYiLCJzaW5nbGVUYXNrTmFtZURpdiIsInNpbmdsZVRhc2tEZXNjRGl2Iiwic2luZ2xlVGFza0RhdGVEaXYiLCJzaW5nbGVUYXNrRHVlRGl2Iiwic2luZ2xlVGFza1ByaW9yaXR5RGl2Iiwic2luZ2xlVGFza05vdGVzRGl2Iiwic2luZ2xlVGFza1N0YXR1c0RpdiIsImR1ZSIsInByaW9yaXR5Iiwic3RhdHVzIiwiYXNrVXNlckJ1dHRvbiIsImFza1VzZXJEaXYiLCJhc2tVc2VyVGV4dCIsImFza1VzZXJUZXh0QXJlYSIsIm5ld0Rlc2MiLCJuZXdOYW1lIiwib2xkTmFtZSIsInRhc2syIiwic2luZ2xlVGFza0RpdlRlbXAiLCJzaW5nbGVUYXNrRGl2IiwiY2xlYXIiLCJteVByb2plY3RzQnV0dG9uIiwic2luZ2xlUHJvamVjdFJlbmFtZUJ1dHRvbiIsInNpbmdsZVByb2plY3RSZWRlc2NCdXR0b24iLCJzaW5nbGVQcm9qZWN0UmVtb3ZlQnV0dG9uIiwiY2xvc2VzdCIsImFkZFRhc2tCdXR0b24iLCJjcmVhdGVUYXNrQnV0dG9uIiwibXlUYXNrc0J1dHRvbiIsInNpbmdsZVRhc2tSZW5hbWVCdXR0b24iLCJzaW5nbGVUYXNrUmVkZXNjQnV0dG9uIiwic2luZ2xlVGFza1Jlbm90ZXNCdXR0b24iLCJzaW5nbGVUYXNrUmVkdWVCdXR0b24iLCJzaW5nbGVUYXNrUmVwcmlvcml0eUJ1dHRvbiIsInNpbmdsZVRhc2tSZXN0YXR1c0J1dHRvbiIsImNvbW1vblRhc2tIYW5kbGVyIiwiYWRkVGFza0Zvcm0iLCJhZGRUYXNrRm9ybURpdiJdLCJzb3VyY2VSb290IjoiIn0=