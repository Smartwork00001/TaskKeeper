(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(537),o=n.n(r),s=n(645),a=n.n(s)()(o());a.push([e.id,'* {\n  margin: 0;\n  padding: 0;\n}\n\nbody{\n  position: relative;\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n}\n\n.project-display{\n  display: flex;\n  flex-wrap: wrap;\n  gap:1rem;\n  padding: 1rem;\n}\n\n.project{\n  cursor: pointer;\n  background-color: antiquewhite;\n  border-radius: 1rem;\n  padding: 1rem;\n  border-left-style: 2px solid #ccc;\n  min-width: 10%;\n  flex: auto;\n}\n\n.nav-bar{\n  padding:1rem;\n}\n\n.okButtonDiv {\n  position: fixed;\n  top: 20%;\n  left: 47%;\n  background-color: aliceblue;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 1rem;\n  gap: 2rem;\n  border-radius: 1rem;\n}\n\n.add-project-form {\n  position: fixed;\n  top: 10%;\n  left: 15%;\n  background-color: aliceblue;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 1rem;\n  gap: 2rem;\n  border-radius: 1rem;\n}\n\n.single-project-details{\n  display: flex;\n  justify-content: space-evenly;\n}\n\n.purple-button{\n  appearance: none;\n  background: #4338ca;\n  border: 0;\n  border-radius: 0.5rem;\n  color: #fff;\n  cursor: pointer;\n  font: inherit;\n  font-weight: 500;\n  line-height: 1;\n  padding: 0.7em 1em;\n}\n\ninput[type="text"] {\n  width: 100%;\n  border: 0;\n  border-bottom: 2px solid gray;\n  outline: 0;\n  font-size: 1.3rem;\n  color: black;\n  padding: 4px 0;\n  background: transparent;\n  transition: border-color 0.2s;\n}\n\n.hidden {\n  display: none;\n}\n\n.big-text{\n  font-weight: bold;\n  font-size: 5rem;\n}\n\n.medium-text{\n  font-weight: bold;\n  font-size: 2.5rem;\n}\n\n.small-text{\n  font-weight: bold;\n  font-size: 1.2rem;\n}\n\n.white-text{\n  color: #f8fafc;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,eAAe;EACf,QAAQ;EACR,aAAa;AACf;;AAEA;EACE,eAAe;EACf,8BAA8B;EAC9B,mBAAmB;EACnB,aAAa;EACb,iCAAiC;EACjC,cAAc;EACd,UAAU;AACZ;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,eAAe;EACf,QAAQ;EACR,SAAS;EACT,2BAA2B;EAC3B,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,aAAa;EACb,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,QAAQ;EACR,SAAS;EACT,2BAA2B;EAC3B,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,aAAa;EACb,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,SAAS;EACT,qBAAqB;EACrB,WAAW;EACX,eAAe;EACf,aAAa;EACb,gBAAgB;EAChB,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,SAAS;EACT,6BAA6B;EAC7B,UAAU;EACV,iBAAiB;EACjB,YAAY;EACZ,cAAc;EACd,uBAAuB;EACvB,6BAA6B;AAC/B;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,cAAc;AAChB",sourcesContent:['* {\n  margin: 0;\n  padding: 0;\n}\n\nbody{\n  position: relative;\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n}\n\n.project-display{\n  display: flex;\n  flex-wrap: wrap;\n  gap:1rem;\n  padding: 1rem;\n}\n\n.project{\n  cursor: pointer;\n  background-color: antiquewhite;\n  border-radius: 1rem;\n  padding: 1rem;\n  border-left-style: 2px solid #ccc;\n  min-width: 10%;\n  flex: auto;\n}\n\n.nav-bar{\n  padding:1rem;\n}\n\n.okButtonDiv {\n  position: fixed;\n  top: 20%;\n  left: 47%;\n  background-color: aliceblue;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 1rem;\n  gap: 2rem;\n  border-radius: 1rem;\n}\n\n.add-project-form {\n  position: fixed;\n  top: 10%;\n  left: 15%;\n  background-color: aliceblue;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 1rem;\n  gap: 2rem;\n  border-radius: 1rem;\n}\n\n.single-project-details{\n  display: flex;\n  justify-content: space-evenly;\n}\n\n.purple-button{\n  appearance: none;\n  background: #4338ca;\n  border: 0;\n  border-radius: 0.5rem;\n  color: #fff;\n  cursor: pointer;\n  font: inherit;\n  font-weight: 500;\n  line-height: 1;\n  padding: 0.7em 1em;\n}\n\ninput[type="text"] {\n  width: 100%;\n  border: 0;\n  border-bottom: 2px solid gray;\n  outline: 0;\n  font-size: 1.3rem;\n  color: black;\n  padding: 4px 0;\n  background: transparent;\n  transition: border-color 0.2s;\n}\n\n.hidden {\n  display: none;\n}\n\n.big-text{\n  font-weight: bold;\n  font-size: 5rem;\n}\n\n.medium-text{\n  font-weight: bold;\n  font-size: 2.5rem;\n}\n\n.small-text{\n  font-weight: bold;\n  font-size: 1.2rem;\n}\n\n.white-text{\n  color: #f8fafc;\n}\n'],sourceRoot:""}]);const c=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,s){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var i=this[c][0];null!=i&&(a[i]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&a[l[0]]||(void 0!==s&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=s),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(o," */");return[t].concat([s]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var s={},a=[],c=0;c<e.length;c++){var i=e[c],d=r.base?i[0]+r.base:i[0],l=s[d]||0,u="".concat(d," ").concat(l);s[d]=l+1;var A=n(u),p={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==A)t[A].references++,t[A].updater(p);else{var m=o(p,r);r.byIndex=c,t.splice(c,0,{identifier:u,updater:m,references:1})}a.push(u)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var s=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<s.length;a++){var c=n(s[a]);t[c].references--}for(var i=r(e,o),d=0;d<s.length;d++){var l=n(s[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}s=i}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var s=t[r]={id:r,exports:{}};return e[r](s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),s=n(569),a=n.n(s),c=n(565),i=n.n(c),d=n(216),l=n.n(d),u=n(589),A=n.n(u),p=n(426),m={};m.styleTagTransform=A(),m.setAttributes=i(),m.insert=a().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=l(),t()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;const f=document.querySelector(".okButton"),g=document.querySelector(".okButtonDiv"),h=document.querySelector(".okButtonText");f.addEventListener("click",(function(){g.classList.add("hidden")}));const j=function(e){h.textContent=e,g.classList.remove("hidden")},y=class{static getProjects(){const e=localStorage.getItem("projects");return null===e?[]:JSON.parse(e)}static updateProject(e){localStorage.removeItem("projects"),localStorage.setItem("projects",JSON.stringify(e))}},v=()=>{const e=document.querySelector(".single-project-display"),t=document.querySelector(".single-project-tasks"),n=document.querySelector(".single-task-display");e.classList.contains("hidden")||e.classList.add("hidden"),t.classList.contains("hidden")||t.classList.add("hidden"),n.classList.contains("hidden")||n.classList.add("hidden");const r=document.querySelector(".project-display");r.classList.contains("hidden")&&r.classList.remove("hidden"),r.innerHTML="",y.getProjects().forEach((e=>{const t=document.createElement("div");t.classList.add("project"),t.innerHTML=`<div class="project-name small-text">${e.name}</div>\n    <div class="project-desc small-text">${e.desc}</div>\n    <div class="project-date small-text">${e.date}</div>`,r.appendChild(t)}))};function E(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function b(e){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},b(e)}function C(e){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},C(e)}const B=class{static validateDate(e){const t=e.split("-");return!!(3===t.length&&t[0]>=1&&t[0]<=31&&t[1]>=1&&t[1]<=12&&t[2]>=1&&t[2]<=9999&&function(e){if(E(1,arguments),!function(e){return E(1,arguments),e instanceof Date||"object"===b(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=function(e){E(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===C(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}(e);return!isNaN(Number(t))}(new Date(t[2],t[1],t[0])))}static validateName(e){return!!(e.length>=1&&e.length<=50&&e.match(/^[a-zA-Z0-9 .]+$/))}static validateDesc(e){return e.length>=1&&e.length<=140}static validateProject(e){return-1!==y.getProjects().findIndex((t=>t.name===e))}static validateNotes(e){return e.length>=1&&e.length<=140}},S=class{static getTask(e){return JSON.parse(localStorage.getItem(e))}static updateTask(e,t){localStorage.removeItem(e),localStorage.setItem(e,JSON.stringify(t))}static addProject(e){localStorage.setItem(e,JSON.stringify([]))}static removeProject(e){localStorage.removeItem(e)}},k=(e,t)=>{if(B.validateName(e)&&B.validateDesc(t)){const n=y.getProjects();if(-1!==n.findIndex((t=>t.name===e)))return void j("This project already exists!");n.push(new class{constructor(e,t){this.name=e,this.desc=t;const n=new Date;this.date=`${n.getDate()}-${n.getMonth()+1}-${n.getFullYear()}`}}(e,t)),S.addProject(e),y.updateProject(n),j(`Project ${e} created`),v()}else j("Please enter valid data\n    \nName must be only letters and numbers between 1 and 50 characters\n    \nDescription must be between 1 and 180 characters")},x=document.querySelector(".create-project-button"),P=document.querySelector(".add-project-form"),w=document.querySelector(".add-project");x.addEventListener("click",(function(e){e.preventDefault();const t=document.forms.addProjectForm,n=new FormData(t);k(n.get("projectName"),n.get("projectDesc")),P.classList.add("hidden"),t.reset()})),w.addEventListener("click",(()=>{P.classList.remove("hidden")}));const T=e=>{const t=(e=>{const t=y.getProjects(),n=t.findIndex((t=>t.name===e));return-1!==n?t[n]:(j("This project does not exist!"),-1)})(e),n=document.querySelector(".single-project-display");n.classList.contains("hidden")&&n.classList.remove("hidden"),n.querySelector(".single-project-name").textContent=t.name,n.querySelector(".single-project-desc").textContent=t.desc,n.querySelector(".single-project-date").textContent=t.date},D=class{constructor(){this.askUserTask=void 0,this.askUserDesc=!1,this.askUserName=!1,this.projectName=void 0,this.projectDesc=void 0}static getAskUserTask(){return this.askUserTask}static setAskUserTask(e){this.askUserTask=e}static getAskUserName(){return this.askUserName}static setAskUserName(e){this.askUserName=!!e}static getAskUserDesc(){return this.askUserDesc}static setAskUserDesc(e){this.askUserDesc=!!e}static getProjectName(){return this.projectName}static setProjectName(e){this.projectName=e}static getProjectDesc(){return this.projectDesc}static setProjectDesc(e){this.projectDesc=e}},L=document.querySelector(".askUserButton"),N=document.querySelector(".askUserDiv"),q=document.querySelector(".askUserText"),U=document.querySelector(".askUserTextArea");L.addEventListener("click",(function(){N.classList.add("hidden"),"changeProjectDesc"===D.getAskUserTask()?(((e,t)=>{const n=y.getProjects(),r=n.findIndex((t=>t.name===e));-1!==r&&B.validateDesc(t)?(n[r].desc=t,y.updateProject(n),j(` Project ${e} desc is changed!`),T(e)):j(`Project ${e} does not exist\n or desc <0 or >140 characters`)})(D.getProjectName(),U.value),D.setProjectName(void 0)):"changeProjectName"===D.getAskUserTask()&&(((e,t)=>{const n=y.getProjects(),r=n.findIndex((t=>t.name===e));-1!==r?(n[r].name=t,y.updateProject(n),j(`Project ${e} is changed to ${t}!`),T(t)):j(`Project ${e} does not exist`)})(D.getProjectName(),U.value),D.setProjectName(void 0)),D.setAskUserTask(void 0)}));const I=function(e){q.textContent=e,N.classList.remove("hidden")},$=(e,t,n,r,o,s)=>{if(B.validateDate(r)&&B.validateName(t)&&B.validateDesc(n)&&B.validateProject(e)&&B.validateNotes(s)){const a=new class{constructor(e,t,n,r,o,s){this.project=e;const a=new Date;this.date=`${a.getDate()}-${a.getMonth()+1}-${a.getFullYear()}`,this.name=t,this.desc=n,this.due=r,this.priority=o,this.notes=s,this.status="not done"}}(e,t,n,r,o,s),c=S.getTask(e);c.push(a),S.updateTask(e,c)}else j("Details not valid!")};localStorage.clear(),k("Default Project","This is the default project"),k("First Project","This is the first project"),k("Third Project","This is the third project"),k("Fourth Project","This is the fourth project"),k("Fifth Project","This is the fifth project");const M=document.querySelector(".project-display"),O=document.querySelector(".my-projects"),z=document.querySelector(".single-project-display"),F=document.querySelector(".single-project-tasks"),Z=document.querySelector(".single-project-rename"),R=document.querySelector(".single-project-redesc"),J=document.querySelector(".single-project-remove");M.addEventListener("click",(function(e){const t=e.target.closest(".project");t&&(M.classList.contains("hidden")||M.classList.add("hidden"),F.classList.contains("hidden")&&F.classList.remove("hidden"),T(t.querySelector(".project-name").textContent))})),O.addEventListener("click",(function(){M.classList.contains("hidden")&&M.classList.remove("hidden"),F.classList.contains("hidden")||F.classList.add("hidden"),z.classList.contains("hidden")||z.classList.add("hidden")})),Z.addEventListener("click",(function(e){const t=e.target.closest(".single-project-details").querySelector(".single-project-name").textContent;D.setProjectName(t),D.setAskUserTask("changeProjectName"),I("enter new name")})),R.addEventListener("click",(function(e){const t=e.target.closest(".single-project-details").querySelector(".single-project-name").textContent;D.setProjectName(t),D.setAskUserTask("changeProjectDesc"),I("enter new desc")})),J.addEventListener("click",(function(e){(e=>{const t=y.getProjects(),n=t.findIndex((t=>t.name===e));-1!==n?(t.splice(n,1),S.removeProject(e),y.updateProject(t),j(`Project ${e} is removed!`),v()):j(`Project ${e} does not exist`)})(e.target.closest(".single-project-details").querySelector(".single-project-name").textContent)})),$("Default Project","Task 1","Desc 1","20-2-2023","low","notes on task"),$("Default Project","Task 2","Desc 2","21-2-2023","normal","notes on task"),$("Default Project","Task 3","Desc 3","22-2-2023","high","notes on task")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,